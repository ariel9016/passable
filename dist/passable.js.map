{"version":3,"file":"passable.js","sources":["../src/constants.js","../src/core/passableResult/index.js","../src/core/Specific/index.js","../src/core/Passable/index.js","../src/Enforce/runnables/rules/is_array/index.js","../src/Enforce/runnables/rules/is_number/index.js","../src/Enforce/runnables/rules/is_string/index.js","../src/Enforce/runnables/rules/matches/index.js","../src/Enforce/runnables/rules/inside/index.js","../src/Enforce/runnables/rules/equals/index.js","../src/Enforce/runnables/rules/is_numeric/index.js","../src/Enforce/runnables/rules/is_empty/index.js","../src/Enforce/runnables/rules/greater_than/index.js","../src/Enforce/runnables/rules/greater_than_or_equals/index.js","../src/Enforce/runnables/rules/less_than/index.js","../src/Enforce/runnables/rules/less_than_or_equals/index.js","../src/Enforce/runnables/rules/longer_than/index.js","../src/Enforce/runnables/rules/longer_than_or_equals/index.js","../src/Enforce/runnables/rules/shorter_than/index.js","../src/Enforce/runnables/rules/shorter_than_or_equals/index.js","../src/Enforce/runnables/rules/length_equals/index.js","../src/Enforce/runnables/helpers/extend_rules/index.js","../src/Enforce/runnables/index.js","../src/Enforce/runners/rule/index.js","../src/Enforce/index.js","../src/validate/index.js","../src/index.js"],"sourcesContent":["// @flow\n\nexport const WARN: Severity = 'warn';\nexport const FAIL: Severity = 'fail';","// @flow\n\nimport { WARN, FAIL } from '../../constants';\nconst severities: string[] = [ WARN, FAIL ];\n\ntype AsyncObject = null | {\n    [fieldName: string]: {\n        done: boolean,\n        callbacks: Function[]\n    }\n};\n\nconst passableResult: Function = (name: string): PassableResult => {\n\n    const completionCallbacks: Function[] = [];\n    let asyncObject: AsyncObject = null;\n\n    /**\n     * Initializes specific field's counters\n     * @param {string} fieldName - The name of the field.\n     */\n    const initFieldCounters: Function = (fieldName: string) => {\n        if (output.testsPerformed[fieldName]) { return output; }\n\n        output.testsPerformed[fieldName] = {\n            testCount: 0,\n            failCount: 0,\n            warnCount: 0\n        };\n    };\n\n    /**\n     * Bumps test counters to indicate tests that's being performed\n     * @param {string} fieldName - The name of the field.\n     */\n    const bumpTestCounter: Function = (fieldName: string) => {\n        if (!output.testsPerformed[fieldName]) { return output; }\n\n        output.testsPerformed[fieldName].testCount++;\n        output.testCount++;\n    };\n\n    /**\n     * Bumps field's warning counts and adds warning string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    const bumpTestWarning: Function = (fieldName: string, statement: string) => {\n        output.hasValidationWarnings = true;\n        output.validationWarnings[fieldName] = output.validationWarnings[fieldName] || [];\n        output.validationWarnings[fieldName].push(statement);\n        output.warnCount++;\n        output.testsPerformed[fieldName].warnCount++;\n    };\n\n    /**\n     * Bumps field's error counts and adds error string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    const bumpTestError: Function = (fieldName: string, statement: string) => {\n        output.hasValidationErrors = true;\n        output.validationErrors[fieldName] = output.validationErrors[fieldName] || [];\n        output.validationErrors[fieldName].push(statement);\n        output.failCount++;\n        output.testsPerformed[fieldName].failCount++;\n    };\n\n    /**\n     * Fails a field and updates output accordingly\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     * @param {string} severity - Whether it is a `fail` or `warn` test.\n     */\n    const fail: Function = (fieldName: string, statement: string, severity: Severity) => {\n        if (!output.testsPerformed[fieldName]) { return output; }\n\n        const selectedSeverity: Severity = severity && severities.includes(severity) ? severity : FAIL;\n\n        selectedSeverity === WARN\n            ? bumpTestWarning(fieldName, statement)\n            : bumpTestError(fieldName, statement);\n    };\n\n    /**\n     * Uniquely add a field to the `skipped` list\n     * @param {string} fieldName\n     */\n    const addToSkipped: Function = (fieldName: string) => {\n        !output.skipped.includes(fieldName) && output.skipped.push(fieldName);\n    };\n\n    /**\n     * Runs completion callbacks aggregated by `done`\n     * regardless of success or failure\n     */\n    const runCompletionCallbacks: Function = () => {\n        completionCallbacks.forEach((cb) => cb(output));\n    };\n\n    /**\n     * Marks a field as async\n     * @param {string} fieldName the name of the field marked as async\n    */\n    const markAsync: Function = (fieldName: string) => {\n        asyncObject = asyncObject || {};\n        asyncObject[fieldName] = asyncObject[fieldName] || {};\n        asyncObject[fieldName] = {\n            done: false,\n            callbacks: asyncObject[fieldName].callbacks || []\n        };\n    };\n\n    /**\n     * Marks an async field as done\n     * @param {string} fieldName the name of the field marked as done\n    */\n    const markAsDone: Function = (fieldName: string) => {\n        if (asyncObject !== null && asyncObject[fieldName]) {\n            asyncObject[fieldName].done = true;\n\n            // run field callbacks set in `after`\n            if (asyncObject[fieldName].callbacks) {\n                asyncObject[fieldName].callbacks.forEach((callback) => callback(output));\n            }\n\n            runCompletionCallbacks();\n        }\n    };\n\n    /**\n     * Registers callback functions to be run when test suite is done running\n     * If current suite is not async, runs the callback immediately\n     * @param {function} callback the function to be called on done\n     * @return {object} output object\n     */\n    const done: Function = (callback: Function) => {\n        if (typeof callback !== 'function') {return output;}\n\n        if (!asyncObject) {\n            callback(output);\n        }\n\n        completionCallbacks.push(callback);\n        return output;\n    };\n\n    /**\n     * Registers callback functions to be run when a certain field is done running\n     * If field is not async, runs the callback immediately\n     * @param {function} callback the function to be called on done\n     * @return {object} output object\n     */\n    const after: Function = (fieldName: string, callback) => {\n        if (typeof callback !== 'function') {\n            return output;\n        }\n\n        asyncObject = asyncObject || {};\n        if (!asyncObject[fieldName] && output.testsPerformed[fieldName]) {\n            callback(output);\n        } else if (asyncObject[fieldName]) {\n            asyncObject[fieldName].callbacks = [...(asyncObject[fieldName].callbacks || []), callback];\n        }\n\n        return output;\n    };\n\n    /**\n     * Gets all the errors of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {Array | Object} The field's errors, or all errors\n     */\n    const getErrors: Function = (fieldName: string) => {\n        if (!fieldName) {\n            return output.validationErrors;\n        }\n\n        if (output.validationErrors[fieldName]) {\n            return output.validationErrors[fieldName];\n        }\n\n        return [];\n    };\n\n    /**\n     * Gets all the warnings of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {Array | Object} The field's warnings, or all warnings\n     */\n    const getWarnings: Function = (fieldName: string) => {\n        if (!fieldName) {\n            return output.validationWarnings;\n        }\n\n        if (output.validationWarnings[fieldName]) {\n            return output.validationWarnings[fieldName];\n        }\n\n        return [];\n    };\n\n    /**\n     * Checks if a certain field (or the whole suite) has errors\n     * @param {string} [fieldName]\n     * @return {boolean}\n     */\n    const hasErrors: Function = (fieldName: string) => {\n        if (!fieldName) {\n            return output.hasValidationErrors;\n        }\n\n        return Boolean(output.getErrors(fieldName).length);\n    };\n\n    /**\n     * Checks if a certain field (or the whole suite) has warnings\n     * @param {string} [fieldName]\n     * @return {boolean}\n     */\n    const hasWarnings: Function = (fieldName: string) => {\n        if (!fieldName) {\n            return output.hasValidationWarnings;\n        }\n\n        return Boolean(output.getWarnings(fieldName).length);\n    };\n\n    const output: PassableOutput = {\n        name,\n        hasValidationErrors: false,\n        hasValidationWarnings: false,\n        failCount: 0,\n        warnCount: 0,\n        testCount: 0,\n        testsPerformed: {},\n        validationErrors: {},\n        validationWarnings: {},\n        skipped: [],\n        hasErrors,\n        hasWarnings,\n        getErrors,\n        getWarnings,\n        done,\n        after\n    };\n\n    return {\n        initFieldCounters,\n        bumpTestError,\n        bumpTestWarning,\n        bumpTestCounter,\n        fail,\n        addToSkipped,\n        runCompletionCallbacks,\n        markAsync,\n        markAsDone,\n        output\n    };\n};\n\nexport default passableResult;","// @flow\n\n/** Class representing validation inclusion and exclusion groups */\nclass Specific {\n    not: SpecificGroup;\n    only: SpecificGroup;\n\n    /**\n     * Initialize Specific object\n     *\n     * @param {String | Array | Object | undefined} specific\n     */\n    constructor(specific: ?SpecificArgs) {\n\n        if (!specific) { return; }\n\n        if (!Specific.is(specific)) {\n            throw new TypeError();\n        }\n\n        if (typeof specific === 'string' || Array.isArray(specific)) {\n            if (specific.length === 0) { return; }\n            this.only = this.populateGroup(this.only, specific);\n            return;\n        }\n\n        if (specific.only) {\n            this.only = this.populateGroup(this.only, specific.only);\n        }\n\n        if (specific.not) {\n            this.not = this.populateGroup(this.not, specific.not);\n        }\n    }\n\n    /**\n     * Populate inclusion and exclusion groups\n     *\n     * @param {Object} group - the group to populate.\n     * @param {String | Array} field - the field to add to the group\n     * @return {Object} modified group\n     */\n    populateGroup(group: SpecificGroup, field: SpecificField) {\n        group = group || {};\n\n        if (typeof field === 'string') {\n            group[field] = true;\n        } else if (Array.isArray(field)) {\n            field.forEach((item) => group[item] = true);\n        }\n\n        return group;\n    }\n\n    /**\n     * Checkes whether a given field name is in exclusion group\n     * or not a member of inclusion group (when present)\n     *\n     * @param {String} fieldName\n     * @return {Boolean}\n     */\n    excludes(fieldName: string) {\n        if (this.only && !this.only[fieldName]) {\n            return true;\n        }\n\n        if (this.not && this.not[fieldName]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Test whether a given argument matches\n     * the `specific` filter convention\n     *\n     * @param {Any} item\n     * @return {boolean}\n     */\n    static is(item: AnyValue) {\n        if (Array.isArray(item)) {\n            return item.every((item) => typeof item === 'string');\n        }\n\n        if (typeof item === 'string') { return true; }\n\n        if (item !== null && typeof item === 'object' && (\n            item.hasOwnProperty('only')\n            || item.hasOwnProperty('not')\n        )) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport default Specific;","// @flow\n\nimport passableResult from '../passableResult';\nimport Specific from '../Specific';\n\nconst constructorError: Function = (name: string, value: string, doc?: string): string => `[Passable]: failed during suite initialization. Unexpected '${typeof value}' for '${name}' argument.\n    See: ${doc ? doc : 'https://fiverr.github.io/passable/getting_started/writing_tests.html'}`;\n\n/**\n * Describes a passable validation suite\n */\nclass Passable {\n    specific: Specific;\n    res: PassableResult;\n    test: TestProvider;\n    pending: Array<PassableTest>;\n\n    pending = [];\n\n    /**\n     * Initializes a validation suite, creates a new passableResult instance and runs pending tests\n     */\n    constructor(name: string, tests: TestsWrapper, specific: ?SpecificArgs) {\n\n        if (typeof name !== 'string') {\n            throw new TypeError(constructorError('suite name', name));\n        }\n\n        if (typeof tests !== 'function') {\n            throw new TypeError(constructorError('tests', tests));\n        }\n\n        if (specific && !Specific.is(specific)) {\n            throw new TypeError(constructorError('specific', tests, 'https://fiverr.github.io/passable/test/specific.html'));\n        }\n\n        this.specific = new Specific(specific);\n\n        this.res = passableResult(name);\n\n        tests(this.test, this.res.output);\n        this.runPendingTests();\n    }\n\n    addPendingTest = (test: PassableTest) => this.pending.push(test);\n\n    clearPendingTest = (test: PassableTest) => {\n        this.pending = (this.pending.filter((t: PassableTest): boolean => t !== test): Array<PassableTest>);\n    };\n\n    /**\n     * Checks if a given field name still has pending tests\n     * @param {String} fieldName name of the field to test against\n     * @return {Boolean}\n     */\n    hasRemainingPendingTests = (fieldName: string) => this.pending.some((test) => test.fieldName === fieldName);\n\n    /**\n     * Test function passed over to the consumer.\n     * It initiates field validation, and adds te test to the pending tests list\n     * @param {string} fieldName the name of the field being validated\n     * @param {string} statement description of the test\n     * @param {function | Promise} test the actual test callback or promise\n     */\n    test = (fieldName: string, statement: string, test: PassableTest, severity: Severity) => {\n\n        if (this.specific.excludes(fieldName)) {\n            this.res.addToSkipped(fieldName);\n            return;\n        }\n\n        this.res.initFieldCounters(fieldName);\n\n        let operation: Function;\n\n        if (typeof test === 'function') {\n            operation = this.runTest;\n        } else if (test instanceof Promise) {\n            operation = this.addPendingTest;\n        } else {\n            return;\n        }\n\n        test.fieldName = fieldName;\n        test.statement = statement;\n        test.severity = severity;\n\n        operation(test);\n    }\n\n    /**\n     * calls `runTest` on all pending tests, clears pending tests list and bumps counters\n     * @param {function | Promise} test the actual test callback or promise\n     */\n    runTest = (test: PassableTest) => {\n\n        const {\n            fieldName,\n            statement,\n            severity\n        }: {\n            severity: Severity,\n            fieldName: string,\n            statement: string\n        } = test;\n\n        let isAsync: boolean = typeof test.then === 'function';\n        let testResult: AnyValue;\n\n\n        if (!isAsync) {\n            try {\n                testResult = test();\n            } catch (e) {\n                testResult = false;\n            }\n\n            if (testResult && typeof testResult.then === 'function') {\n                isAsync = true;\n\n                // $FlowFixMe\n                test = testResult;\n            }\n        }\n\n        if (isAsync) {\n            this.res.markAsync(fieldName);\n\n            const done: Function = () => {\n                this.clearPendingTest(test);\n                if (!this.hasRemainingPendingTests(fieldName)) {\n                    this.res.markAsDone(fieldName);\n                }\n            };\n\n            const fail: Function = () => {\n                // order is important here! fail needs to be called before `done`.\n                this.res.fail(fieldName, statement, severity);\n                done();\n            };\n\n            try {\n                // $FlowFixMe\n                test.then(done, fail);\n            } catch (e) {\n                fail();\n            }\n        } else {\n\n            if (testResult === false) {\n                this.res.fail(fieldName, statement, severity);\n            }\n            this.clearPendingTest(test);\n        }\n        this.res.bumpTestCounter(fieldName);\n    }\n\n    /**\n     * calls `runTest` on all pending tests, clears pending tests list and bumps counters\n     */\n    runPendingTests = () => {\n        [...this.pending].forEach(this.runTest);\n    }\n}\n\nexport default Passable;","// @flow\n\nfunction isArray(value: mixed): boolean {\n    return Boolean(Array.isArray(value));\n}\n\nisArray.negativeForm = 'isNotArray';\n\nexport default isArray;","// @flow\n\nfunction isNumber(value: mixed): boolean {\n    return Boolean(typeof value === 'number');\n}\n\nisNumber.negativeForm = 'isNotNumber';\n\nexport default isNumber;","// @flow\n\nfunction isString(value: mixed): boolean {\n    return Boolean(typeof value === 'string');\n}\n\nisString.negativeForm = 'isNotString';\n\nexport default isString;","// @flow\n\nfunction matches(value: string, regex: RegExp | string): boolean {\n\n    if (regex instanceof RegExp) {\n        return regex.test(value);\n    } else if (typeof regex === 'string') {\n        return new RegExp(regex).test(value);\n    } else {\n        return false;\n    }\n}\n\nmatches.negativeForm = 'notMatches';\n\nexport default matches;","// @flow\n\ntype All = NumStrBool | Array<NumStrBool>;\ntype Value = All | Array<NumStrBool>;\ntype Arg = string | Array<NumStrBool>;\n\nfunction inside(value: Value, arg1: Arg): boolean {\n\n    if (Array.isArray(arg1) && ['string', 'number', 'boolean'].includes(typeof value)) {\n        return arg1.includes(value);\n    }\n\n    // both value and arg1 are strings\n    if (typeof arg1 === 'string' && typeof value === 'string') {\n        return arg1.includes(value);\n    }\n\n    return false;\n}\n\ninside.negativeForm = 'notInside';\n\nexport default inside;","// @flow\n\nfunction equals(value: AnyValue, arg1: AnyValue): boolean {\n    return value === arg1;\n}\n\nequals.negativeForm = 'notEquals';\n\nexport default equals;","// @flow\n\nfunction isNumeric(value: mixed): boolean {\n    const result: boolean = !isNaN(parseFloat(value)) && !isNaN(Number(value)) && isFinite(value);\n    return Boolean(result);\n}\n\nisNumeric.negativeForm = 'isNotNumeric';\n\nexport default isNumeric;","// @flow\nimport isNumeric from '../is_numeric';\n\nfunction isEmpty(value: AnyValue): boolean {\n    if (!value) {\n        return true;\n    } else if (isNumeric(value)) {\n        return value === 0;\n    } else if (value.hasOwnProperty('length')) {\n        return value.length === 0;\n    } else if (typeof value === 'object') {\n        return Object.keys(value).length === 0;\n    } else {\n        return true;\n    }\n};\n\nisEmpty.negativeForm = 'isNotEmpty';\n\nexport default isEmpty;","// @flow\nimport isNumeric from '../is_numeric';\n\nfunction greaterThan(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) > Number(arg1);\n}\n\ngreaterThan.alias = 'gt';\n\nexport default greaterThan;","// @flow\nimport isNumeric from '../is_numeric';\n\nfunction greaterThanOrEquals(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) >= Number(arg1);\n}\n\ngreaterThanOrEquals.alias = 'gte';\n\nexport default greaterThanOrEquals;","// @flow\nimport isNumeric from '../is_numeric';\n\nfunction lessThan(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) < Number(arg1);\n}\n\nlessThan.alias = 'lt';\n\nexport default lessThan;","// @flow\nimport isNumeric from '../is_numeric';\n\nfunction lessThanOrEquals(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) <= Number(arg1);\n}\n\nlessThanOrEquals.alias = 'lte';\n\nexport default lessThanOrEquals;","// @flow\n\nfunction longerThan(value: StringOrArray, arg1: number): boolean {\n    return value.length > arg1;\n}\n\nexport default longerThan;\n","// @flow\n\nfunction longerThanOrEquals(value: StringOrArray, arg1: number): boolean {\n    return value.length >= arg1;\n}\n\nexport default longerThanOrEquals;\n","// @flow\n\nfunction shorterThan(value: StringOrArray, arg1: number): boolean {\n    return value.length < arg1;\n}\n\nexport default shorterThan;\n","// @flow\n\nfunction shorterThanOrEquals(value: StringOrArray, arg1: number): boolean {\n    return value.length <= arg1;\n}\n\nexport default shorterThanOrEquals;\n","// @flow\n\nfunction lengthEquals(value: StringOrArray, arg1: number): boolean {\n    return value.length === arg1;\n}\n\nlengthEquals.negativeForm = 'lengthNotEquals';\n\nexport default lengthEquals;\n","// @flow\n\n/**\n * Collects rules with `negativeForm` or `alias` attributes.\n * Adds a rule with the correct configuration.\n * @param {Object} rules - enforce rules object\n * @returns {Object} extended rules object\n */\nfunction extendRules(rules: EnforceRules) {\n\n    for (const rule: string in rules) {\n        const negativeForm: string = rules[rule].negativeForm;\n        const alias: string = rules[rule].alias;\n\n        if (negativeForm) {\n            rules[negativeForm] = (...args) => !rules[rule](...args);\n        }\n\n        if (alias) {\n            rules[alias] = rules[rule];\n        }\n    }\n\n    return rules;\n}\n\nexport default extendRules;\n","// // @flow\n\nimport isArray from './rules/is_array';\nimport isNumber from './rules/is_number';\nimport isString from './rules/is_string';\nimport matches from './rules/matches';\nimport inside from './rules/inside';\nimport equals from './rules/equals';\nimport isNumeric from './rules/is_numeric';\nimport isEmpty from './rules/is_empty';\nimport greaterThan from './rules/greater_than';\nimport greaterThanOrEquals from './rules/greater_than_or_equals';\nimport lessThan from './rules/less_than';\nimport lessThanOrEquals from './rules/less_than_or_equals';\nimport longerThan from './rules/longer_than';\nimport longerThanOrEquals from './rules/longer_than_or_equals';\nimport shorterThan from './rules/shorter_than';\nimport shorterThanOrEquals from './rules/shorter_than_or_equals';\nimport lengthEquals from './rules/length_equals';\nimport extendRules from './helpers/extend_rules';\n\nconst rules: EnforceRules = {\n    isArray,\n    isNumber,\n    isString,\n    matches,\n    inside,\n    equals,\n    isNumeric,\n    isEmpty,\n    greaterThan,\n    greaterThanOrEquals,\n    lessThan,\n    lessThanOrEquals,\n    longerThan,\n    longerThanOrEquals,\n    shorterThan,\n    shorterThanOrEquals,\n    lengthEquals\n};\n\nexport default extendRules(rules);","// @flow\n\n/**\n * Run a single rule against enforced value (e.g. `isNumber()`)\n *\n * @param {Function} rule - rule to run\n * @param {Any} value\n * @param {Array} args list of arguments sent from consumer\n */\nfunction rule(rule: EnforceRule, value: AnyValue, ...args: RuleArgs): void {\n\n    if (typeof rule !== 'function') { return; }\n\n    if (rule(value, ...args) !== true) {\n        throw new Error(`[Enforce]: invalid ${typeof value} value`);\n    }\n}\n\nexport default rule;\n","// @flow\n\nimport rules from './runnables';\nimport ruleRunner from './runners/rule';\n\n// $FlowFixMe\nconst glob: GlobalObject = Function('return this')();\n\nconst isRule: Function = (rulesObject, name): boolean => (\n    rulesObject.hasOwnProperty(name) && typeof rulesObject[name] === 'function'\n);\n\nconst Enforce: Function = (customRules: EnforceRules = {}): EnforceInstance => {\n    const rulesObject: EnforceRules = {...rules, ...customRules};\n\n    if (typeof Proxy === 'function') {\n        return (value: AnyValue): EnforceRules => {\n            const proxy: EnforceRules = new Proxy(rulesObject, {\n                get: (rules, fnName) => {\n                    if (!isRule(rules, fnName)) { return; }\n\n                    return (...args) => {\n                        ruleRunner(rules[fnName], value, ...args);\n                        return proxy;\n                    };\n                }\n            });\n            return proxy;\n        };\n    }\n\n    // This is relatively heavier, and preferably should only be done when lacking proxy support\n    return (value) => Object.keys(rulesObject).reduce((allRules, fnName) => {\n        if (!isRule(rulesObject, fnName)) { return allRules; }\n\n        allRules[fnName] = (...args) => {\n            ruleRunner(rulesObject[fnName], value, ...args);\n            return allRules;\n        };\n\n        return allRules;\n    }, {});\n};\n\nexport default Enforce;","// @flow\n\n/**\n * Run tests and catch errors\n *\n * @param {function} callback The test content\n * @return {boolean}\n */\nfunction validate(test: PassableTest): boolean {\n\n    if (typeof test !== 'function' && !(test instanceof Promise)) {\n        throw new TypeError(`[Validate]: expected ${typeof test} to be a function.`);\n    }\n\n    try {\n        return test() !== false;\n    } catch (_) {\n        return false;\n    }\n}\n\nexport default validate;","// @flow\nimport Passable from './core/Passable';\nimport Enforce from './Enforce';\nimport validate from './validate';\nimport { WARN, FAIL } from './constants';\n\nfunction passable(name: string, tests: TestsWrapper, specific: ?SpecificArgs) {\n    const suite: Passable = new Passable(name, tests, specific);\n    return suite.res.output;\n}\n\npassable.VERSION = PASSABLE_VERSION;\npassable.enforce = new Enforce({});\npassable.Enforce = Enforce;\npassable.validate = validate;\npassable.WARN = WARN;\npassable.FAIL = FAIL;\n\nexport default passable;"],"names":["WARN","FAIL","severities","passableResult","name","completionCallbacks","asyncObject","initFieldCounters","fieldName","output","testsPerformed","testCount","failCount","warnCount","bumpTestCounter","bumpTestWarning","statement","hasValidationWarnings","validationWarnings","push","bumpTestError","hasValidationErrors","validationErrors","fail","severity","selectedSeverity","includes","addToSkipped","skipped","runCompletionCallbacks","forEach","cb","markAsync","done","callbacks","markAsDone","callback","after","getErrors","getWarnings","hasErrors","Boolean","length","hasWarnings","Specific","specific","is","TypeError","Array","isArray","only","populateGroup","not","group","field","item","every","hasOwnProperty","constructorError","value","doc","Passable","tests","test","pending","filter","t","some","excludes","res","operation","runTest","Promise","addPendingTest","isAsync","then","testResult","e","clearPendingTest","hasRemainingPendingTests","runPendingTests","negativeForm","isNumber","isString","matches","regex","RegExp","inside","arg1","equals","isNumeric","result","isNaN","parseFloat","Number","isFinite","isEmpty","Object","keys","greaterThan","alias","greaterThanOrEquals","lessThan","lessThanOrEquals","longerThan","longerThanOrEquals","shorterThan","shorterThanOrEquals","lengthEquals","extendRules","rules","rule","args","Error","glob","Function","isRule","rulesObject","Enforce","customRules","Proxy","proxy","get","fnName","ruleRunner","reduce","allRules","validate","_","passable","suite","VERSION","PASSABLE_VERSION","enforce"],"mappings":"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"}