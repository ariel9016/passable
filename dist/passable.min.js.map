{"version":3,"file":"passable.min.js","sources":["../src/constants.js","../src/core/passableResult/index.js","../src/core/Specific/index.js","../src/core/Passable/index.js","../src/Enforce/runnables/rules/is_array/index.js","../src/Enforce/runnables/rules/is_number/index.js","../src/Enforce/runnables/rules/is_string/index.js","../src/Enforce/runnables/rules/matches/index.js","../src/Enforce/runnables/rules/inside/index.js","../src/Enforce/runnables/rules/equals/index.js","../src/Enforce/runnables/rules/is_numeric/index.js","../src/Enforce/runnables/rules/is_empty/index.js","../src/Enforce/runnables/rules/greater_than/index.js","../src/Enforce/runnables/rules/greater_than_or_equals/index.js","../src/Enforce/runnables/rules/less_than/index.js","../src/Enforce/runnables/rules/less_than_or_equals/index.js","../src/Enforce/runnables/rules/length_equals/index.js","../src/Enforce/runnables/index.js","../src/Enforce/runnables/helpers/extend_rules/index.js","../src/Enforce/runnables/rules/longer_than/index.js","../src/Enforce/runnables/rules/longer_than_or_equals/index.js","../src/Enforce/runnables/rules/shorter_than/index.js","../src/Enforce/runnables/rules/shorter_than_or_equals/index.js","../src/Enforce/runners/rule/index.js","../src/Enforce/index.js","../src/index.js","../src/validate/index.js"],"sourcesContent":["// @flow\n\nexport const WARN: Severity = 'warn';\nexport const FAIL: Severity = 'fail';","// @flow\n\nimport { WARN, FAIL } from '../../constants';\nconst severities: string[] = [ WARN, FAIL ];\n\ntype AsyncObject = null | {\n    [fieldName: string]: {\n        done: boolean,\n        callbacks: Function[]\n    }\n};\n\nconst passableResult: Function = (name: string): PassableResult => {\n\n    const completionCallbacks: Function[] = [];\n    let asyncObject: AsyncObject = null;\n\n    /**\n     * Initializes specific field's counters\n     * @param {string} fieldName - The name of the field.\n     */\n    const initFieldCounters: Function = (fieldName: string) => {\n        if (output.testsPerformed[fieldName]) { return output; }\n\n        output.testsPerformed[fieldName] = {\n            testCount: 0,\n            failCount: 0,\n            warnCount: 0\n        };\n    };\n\n    /**\n     * Bumps test counters to indicate tests that's being performed\n     * @param {string} fieldName - The name of the field.\n     */\n    const bumpTestCounter: Function = (fieldName: string) => {\n        if (!output.testsPerformed[fieldName]) { return output; }\n\n        output.testsPerformed[fieldName].testCount++;\n        output.testCount++;\n    };\n\n    /**\n     * Bumps field's warning counts and adds warning string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    const bumpTestWarning: Function = (fieldName: string, statement: string) => {\n        output.hasValidationWarnings = true;\n        output.validationWarnings[fieldName] = output.validationWarnings[fieldName] || [];\n        output.validationWarnings[fieldName].push(statement);\n        output.warnCount++;\n        output.testsPerformed[fieldName].warnCount++;\n    };\n\n    /**\n     * Bumps field's error counts and adds error string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    const bumpTestError: Function = (fieldName: string, statement: string) => {\n        output.hasValidationErrors = true;\n        output.validationErrors[fieldName] = output.validationErrors[fieldName] || [];\n        output.validationErrors[fieldName].push(statement);\n        output.failCount++;\n        output.testsPerformed[fieldName].failCount++;\n    };\n\n    /**\n     * Fails a field and updates output accordingly\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     * @param {string} severity - Whether it is a `fail` or `warn` test.\n     */\n    const fail: Function = (fieldName: string, statement: string, severity: Severity) => {\n        if (!output.testsPerformed[fieldName]) { return output; }\n\n        const selectedSeverity: Severity = severity && severities.includes(severity) ? severity : FAIL;\n\n        selectedSeverity === WARN\n            ? bumpTestWarning(fieldName, statement)\n            : bumpTestError(fieldName, statement);\n    };\n\n    /**\n     * Uniquely add a field to the `skipped` list\n     * @param {string} fieldName\n     */\n    const addToSkipped: Function = (fieldName: string) => {\n        !output.skipped.includes(fieldName) && output.skipped.push(fieldName);\n    };\n\n    /**\n     * Runs completion callbacks aggregated by `done`\n     * regardless of success or failure\n     */\n    const runCompletionCallbacks: Function = () => {\n        completionCallbacks.forEach((cb) => cb(output));\n    };\n\n    /**\n     * Marks a field as async\n     * @param {string} fieldName the name of the field marked as async\n    */\n    const markAsync: Function = (fieldName: string) => {\n        asyncObject = asyncObject || {};\n        asyncObject[fieldName] = asyncObject[fieldName] || {};\n        asyncObject[fieldName] = {\n            done: false,\n            callbacks: asyncObject[fieldName].callbacks || []\n        };\n    };\n\n    /**\n     * Marks an async field as done\n     * @param {string} fieldName the name of the field marked as done\n    */\n    const markAsDone: Function = (fieldName: string) => {\n        if (asyncObject !== null && asyncObject[fieldName]) {\n            asyncObject[fieldName].done = true;\n\n            // run field callbacks set in `after`\n            if (asyncObject[fieldName].callbacks) {\n                asyncObject[fieldName].callbacks.forEach((callback) => callback(output));\n            }\n        }\n    };\n\n    /**\n     * Registers callback functions to be run when test suite is done running\n     * If current suite is not async, runs the callback immediately\n     * @param {function} callback the function to be called on done\n     * @return {object} output object\n     */\n    const done: Function = (callback: Function) => {\n        if (typeof callback !== 'function') {return output;}\n\n        if (!asyncObject) {\n            callback(output);\n        }\n\n        completionCallbacks.push(callback);\n        return output;\n    };\n\n    /**\n     * Registers callback functions to be run when a certain field is done running\n     * If field is not async, runs the callback immediately\n     * @param {function} callback the function to be called on done\n     * @return {object} output object\n     */\n    const after: Function = (fieldName: string, callback) => {\n\n        if (typeof callback !== 'function') {\n            return output;\n        }\n\n        asyncObject = asyncObject || {};\n        if (!asyncObject[fieldName] && output.testsPerformed[fieldName]) {\n            callback(output);\n        } else if (asyncObject[fieldName]) {\n            asyncObject[fieldName].callbacks = [...(asyncObject[fieldName].callbacks || []), callback];\n        }\n\n        return output;\n    };\n\n    /**\n     * Gets all the errors of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {Array | Object} The field's errors, or all errors\n     */\n    const getErrors: Function = (fieldName: string) => {\n        if (!fieldName) {\n            return output.validationErrors;\n        }\n\n        if (output.validationErrors[fieldName]) {\n            return output.validationErrors[fieldName];\n        }\n\n        return [];\n    };\n\n    /**\n     * Gets all the warnings of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {Array | Object} The field's warnings, or all warnings\n     */\n    const getWarnings: Function = (fieldName: string) => {\n        if (!fieldName) {\n            return output.validationWarnings;\n        }\n\n        if (output.validationWarnings[fieldName]) {\n            return output.validationWarnings[fieldName];\n        }\n\n        return [];\n    };\n\n    /**\n     * Checks if a certain field (or the whole suite) has errors\n     * @param {string} [fieldName]\n     * @return {boolean}\n     */\n    const hasErrors: Function = (fieldName: string) => {\n        if (!fieldName) {\n            return output.hasValidationErrors;\n        }\n\n        return Boolean(output.getErrors(fieldName).length);\n    };\n\n    /**\n     * Checks if a certain field (or the whole suite) has warnings\n     * @param {string} [fieldName]\n     * @return {boolean}\n     */\n    const hasWarnings: Function = (fieldName: string) => {\n        if (!fieldName) {\n            return output.hasValidationWarnings;\n        }\n\n        return Boolean(output.getWarnings(fieldName).length);\n    };\n\n    const output: PassableOutput = {\n        name,\n        hasValidationErrors: false,\n        hasValidationWarnings: false,\n        failCount: 0,\n        warnCount: 0,\n        testCount: 0,\n        testsPerformed: {},\n        validationErrors: {},\n        validationWarnings: {},\n        skipped: [],\n        hasErrors,\n        hasWarnings,\n        getErrors,\n        getWarnings,\n        done,\n        after\n    };\n\n    return {\n        initFieldCounters,\n        bumpTestError,\n        bumpTestWarning,\n        bumpTestCounter,\n        fail,\n        addToSkipped,\n        runCompletionCallbacks,\n        markAsync,\n        markAsDone,\n        output\n    };\n};\n\nexport default passableResult;","// @flow\n\n/** Class representing validation inclusion and exclusion groups */\nclass Specific {\n    not: SpecificGroup;\n    only: SpecificGroup;\n\n    /**\n     * Initialize Specific object\n     *\n     * @param {String | Array | Object | undefined} specific\n     */\n    constructor(specific: ?SpecificArgs) {\n\n        if (!specific) { return; }\n\n        if (!Specific.is(specific)) {\n            throw new TypeError();\n        }\n\n        if (typeof specific === 'string' || Array.isArray(specific)) {\n            if (specific.length === 0) { return; }\n            this.only = this.populateGroup(this.only, specific);\n            return;\n        }\n\n        if (specific.only) {\n            this.only = this.populateGroup(this.only, specific.only);\n        }\n\n        if (specific.not) {\n            this.not = this.populateGroup(this.not, specific.not);\n        }\n    }\n\n    /**\n     * Populate inclusion and exclusion groups\n     *\n     * @param {Object} group - the group to populate.\n     * @param {String | Array} field - the field to add to the group\n     * @return {Object} modified group\n     */\n    populateGroup(group: SpecificGroup, field: SpecificField) {\n        group = group || {};\n\n        if (typeof field === 'string') {\n            group[field] = true;\n        } else if (Array.isArray(field)) {\n            field.forEach((item) => group[item] = true);\n        }\n\n        return group;\n    }\n\n    /**\n     * Checkes whether a given field name is in exclusion group\n     * or not a member of inclusion group (when present)\n     *\n     * @param {String} fieldName\n     * @return {Boolean}\n     */\n    excludes(fieldName: string) {\n        if (this.only && !this.only[fieldName]) {\n            return true;\n        }\n\n        if (this.not && this.not[fieldName]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Test whether a given argument matches\n     * the `specific` filter convention\n     *\n     * @param {Any} item\n     * @return {boolean}\n     */\n    static is(item: AnyValue) {\n        if (Array.isArray(item)) {\n            return item.every((item) => typeof item === 'string');\n        }\n\n        if (typeof item === 'string') { return true; }\n\n        if (item !== null && typeof item === 'object' && (\n            item.hasOwnProperty('only')\n            || item.hasOwnProperty('not')\n        )) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport default Specific;","// @flow\n\nimport passableResult from '../passableResult';\nimport Specific from '../Specific';\n\nconst constructorError: Function = (name: string, value: string, doc?: string): string => `[Passable]: failed during suite initialization. Unexpected '${typeof value}' for '${name}' argument.\n    See: ${doc ? doc : 'https://fiverr.github.io/passable/getting_started/writing_tests.html'}`;\n\n/**\n * Describes a passable validation suite\n */\nclass Passable {\n    specific: Specific;\n    res: PassableResult;\n    test: TestProvider;\n    pending: Array<PassableTest>;\n\n    pending = [];\n\n    /**\n     * Initializes a validation suite, creates a new passableResult instance and runs pending tests\n     */\n    constructor(name: string, tests: TestsWrapper, specific: ?SpecificArgs) {\n\n        if (typeof name !== 'string') {\n            throw new TypeError(constructorError('suite name', name));\n        }\n\n        if (typeof tests !== 'function') {\n            throw new TypeError(constructorError('tests', tests));\n        }\n\n        if (specific && !Specific.is(specific)) {\n            throw new TypeError(constructorError('specific', tests, 'https://fiverr.github.io/passable/test/specific.html'));\n        }\n\n        this.specific = new Specific(specific);\n\n        this.res = passableResult(name);\n\n        tests(this.test, this.res.output);\n        this.runPendingTests();\n    }\n\n    addPendingTest = (test: PassableTest) => this.pending.push(test);\n\n    clearPendingTest = (test: PassableTest) => {\n        this.pending = (this.pending.filter((t: PassableTest): boolean => t !== test): Array<PassableTest>);\n        if (this.pending.length === 0) {\n            this.res.runCompletionCallbacks();\n        }\n    };\n\n    /**\n     * Checks if a given field name still has pending tests\n     * @param {String} fieldName name of the field to test against\n     * @return {Boolean}\n     */\n    hasRemainingPendingTests = (fieldName: string) => this.pending.some((test) => test.fieldName === fieldName);\n\n    /**\n     * Test function passed over to the consumer.\n     * It initiates field validation, and adds te test to the pending tests list\n     * @param {string} fieldName the name of the field being validated\n     * @param {string} statement description of the test\n     * @param {function | Promise} test the actual test callback or promise\n     */\n    test = (fieldName: string, statement: string, test: PassableTest, severity: Severity) => {\n\n        if (this.specific.excludes(fieldName)) {\n            this.res.addToSkipped(fieldName);\n            return;\n        }\n\n        this.res.initFieldCounters(fieldName);\n\n        let operation: Function;\n\n        if (typeof test === 'function') {\n            operation = this.runTest;\n        } else if (test instanceof Promise) {\n            operation = this.addPendingTest;\n        } else {\n            return;\n        }\n\n        test.fieldName = fieldName;\n        test.statement = statement;\n        test.severity = severity;\n\n        operation(test);\n    }\n\n    /**\n     * calls `runTest` on all pending tests, clears pending tests list and bumps counters\n     * @param {function | Promise} test the actual test callback or promise\n     */\n    runTest = (test: PassableTest) => {\n\n        const {\n            fieldName,\n            statement,\n            severity\n        }: {\n            severity: Severity,\n            fieldName: string,\n            statement: string\n        } = test;\n\n        let isAsync: boolean = typeof test.then === 'function';\n        let testResult: AnyValue;\n\n        if (!isAsync) {\n            try {\n                testResult = test();\n            } catch (e) {\n                testResult = false;\n            }\n\n            if (testResult && typeof testResult.then === 'function') {\n                isAsync = true;\n\n                // $FlowFixMe\n                test = testResult;\n            }\n        }\n\n        if (isAsync) {\n            this.res.markAsync(test.fieldName);\n\n            const done: Function = () => {\n                this.clearPendingTest(test);\n                if (!this.hasRemainingPendingTests(fieldName)) {\n                    this.res.markAsDone(fieldName);\n                }\n            };\n\n            const fail: Function = () => {\n                // order is important here! fail needs to be called before `done`.\n                this.res.fail(fieldName, statement, severity);\n                done();\n            };\n\n            try {\n                // $FlowFixMe\n                test.then(done, fail);\n            } catch (e) {\n                fail();\n            }\n        } else {\n\n            if (testResult === false) {\n                this.res.fail(fieldName, statement, severity);\n            }\n            this.clearPendingTest(test);\n        }\n        this.res.bumpTestCounter(fieldName);\n    }\n\n    /**\n     * calls `runTest` on all pending tests, clears pending tests list and bumps counters\n     */\n    runPendingTests = () => {\n        [...this.pending].forEach(this.runTest);\n    }\n}\n\nexport default Passable;","// @flow\n\nfunction isArray(value: mixed): boolean {\n    return Boolean(Array.isArray(value));\n}\n\nisArray.negativeForm = 'isNotArray';\n\nexport default isArray;","// @flow\n\nfunction isNumber(value: mixed): boolean {\n    return Boolean(typeof value === 'number');\n}\n\nisNumber.negativeForm = 'isNotNumber';\n\nexport default isNumber;","// @flow\n\nfunction isString(value: mixed): boolean {\n    return Boolean(typeof value === 'string');\n}\n\nisString.negativeForm = 'isNotString';\n\nexport default isString;","// @flow\n\nfunction matches(value: string, regex: RegExp | string): boolean {\n\n    if (regex instanceof RegExp) {\n        return regex.test(value);\n    } else if (typeof regex === 'string') {\n        return new RegExp(regex).test(value);\n    } else {\n        return false;\n    }\n}\n\nmatches.negativeForm = 'notMatches';\n\nexport default matches;","// @flow\n\ntype All = NumStrBool | Array<NumStrBool>;\ntype Value = All | Array<NumStrBool>;\ntype Arg = string | Array<NumStrBool>;\n\nfunction inside(value: Value, arg1: Arg): boolean {\n\n    if (Array.isArray(arg1) && ['string', 'number', 'boolean'].includes(typeof value)) {\n        return arg1.includes(value);\n    }\n\n    // both value and arg1 are strings\n    if (typeof arg1 === 'string' && typeof value === 'string') {\n        return arg1.includes(value);\n    }\n\n    return false;\n}\n\ninside.negativeForm = 'notInside';\n\nexport default inside;","// @flow\n\nfunction equals(value: AnyValue, arg1: AnyValue): boolean {\n    return value === arg1;\n}\n\nequals.negativeForm = 'notEquals';\n\nexport default equals;","// @flow\n\nfunction isNumeric(value: mixed): boolean {\n    const result: boolean = !isNaN(parseFloat(value)) && !isNaN(Number(value)) && isFinite(value);\n    return Boolean(result);\n}\n\nisNumeric.negativeForm = 'isNotNumeric';\n\nexport default isNumeric;","// @flow\nimport isNumeric from '../is_numeric';\n\nfunction isEmpty(value: AnyValue): boolean {\n    if (!value) {\n        return true;\n    } else if (isNumeric(value)) {\n        return value === 0;\n    } else if (value.hasOwnProperty('length')) {\n        return value.length === 0;\n    } else if (typeof value === 'object') {\n        return Object.keys(value).length === 0;\n    } else {\n        return true;\n    }\n};\n\nisEmpty.negativeForm = 'isNotEmpty';\n\nexport default isEmpty;","// @flow\nimport isNumeric from '../is_numeric';\n\nfunction greaterThan(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) > Number(arg1);\n}\n\ngreaterThan.alias = 'gt';\n\nexport default greaterThan;","// @flow\nimport isNumeric from '../is_numeric';\n\nfunction greaterThanOrEquals(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) >= Number(arg1);\n}\n\ngreaterThanOrEquals.alias = 'gte';\n\nexport default greaterThanOrEquals;","// @flow\nimport isNumeric from '../is_numeric';\n\nfunction lessThan(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) < Number(arg1);\n}\n\nlessThan.alias = 'lt';\n\nexport default lessThan;","// @flow\nimport isNumeric from '../is_numeric';\n\nfunction lessThanOrEquals(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) <= Number(arg1);\n}\n\nlessThanOrEquals.alias = 'lte';\n\nexport default lessThanOrEquals;","// @flow\n\nfunction lengthEquals(value: StringOrArray, arg1: number): boolean {\n    return value.length === arg1;\n}\n\nlengthEquals.negativeForm = 'lengthNotEquals';\n\nexport default lengthEquals;\n","// // @flow\n\nimport isArray from './rules/is_array';\nimport isNumber from './rules/is_number';\nimport isString from './rules/is_string';\nimport matches from './rules/matches';\nimport inside from './rules/inside';\nimport equals from './rules/equals';\nimport isNumeric from './rules/is_numeric';\nimport isEmpty from './rules/is_empty';\nimport greaterThan from './rules/greater_than';\nimport greaterThanOrEquals from './rules/greater_than_or_equals';\nimport lessThan from './rules/less_than';\nimport lessThanOrEquals from './rules/less_than_or_equals';\nimport longerThan from './rules/longer_than';\nimport longerThanOrEquals from './rules/longer_than_or_equals';\nimport shorterThan from './rules/shorter_than';\nimport shorterThanOrEquals from './rules/shorter_than_or_equals';\nimport lengthEquals from './rules/length_equals';\nimport extendRules from './helpers/extend_rules';\n\nconst rules: EnforceRules = {\n    isArray,\n    isNumber,\n    isString,\n    matches,\n    inside,\n    equals,\n    isNumeric,\n    isEmpty,\n    greaterThan,\n    greaterThanOrEquals,\n    lessThan,\n    lessThanOrEquals,\n    longerThan,\n    longerThanOrEquals,\n    shorterThan,\n    shorterThanOrEquals,\n    lengthEquals\n};\n\nexport default extendRules(rules);","// @flow\n\n/**\n * Collects rules with `negativeForm` or `alias` attributes.\n * Adds a rule with the correct configuration.\n * @param {Object} rules - enforce rules object\n * @returns {Object} extended rules object\n */\nfunction extendRules(rules: EnforceRules) {\n\n    for (const rule: string in rules) {\n        const negativeForm: string = rules[rule].negativeForm;\n        const alias: string = rules[rule].alias;\n\n        if (negativeForm) {\n            rules[negativeForm] = (...args) => !rules[rule](...args);\n        }\n\n        if (alias) {\n            rules[alias] = rules[rule];\n        }\n    }\n\n    return rules;\n}\n\nexport default extendRules;\n","// @flow\n\nfunction longerThan(value: StringOrArray, arg1: number): boolean {\n    return value.length > arg1;\n}\n\nexport default longerThan;\n","// @flow\n\nfunction longerThanOrEquals(value: StringOrArray, arg1: number): boolean {\n    return value.length >= arg1;\n}\n\nexport default longerThanOrEquals;\n","// @flow\n\nfunction shorterThan(value: StringOrArray, arg1: number): boolean {\n    return value.length < arg1;\n}\n\nexport default shorterThan;\n","// @flow\n\nfunction shorterThanOrEquals(value: StringOrArray, arg1: number): boolean {\n    return value.length <= arg1;\n}\n\nexport default shorterThanOrEquals;\n","// @flow\n\n/**\n * Run a single rule against enforced value (e.g. `isNumber()`)\n *\n * @param {Function} rule - rule to run\n * @param {Any} value\n * @param {Array} args list of arguments sent from consumer\n */\nfunction rule(rule: EnforceRule, value: AnyValue, ...args: RuleArgs): void {\n\n    if (typeof rule !== 'function') { return; }\n\n    if (rule(value, ...args) !== true) {\n        throw new Error(`[Enforce]: invalid ${typeof value} value`);\n    }\n}\n\nexport default rule;\n","// @flow\n\nimport rules from './runnables';\nimport ruleRunner from './runners/rule';\n\n// $FlowFixMe\nconst glob: GlobalObject = Function('return this')();\n\nconst isRule: Function = (rulesObject, name): boolean => (\n    rulesObject.hasOwnProperty(name) && typeof rulesObject[name] === 'function'\n);\n\nconst Enforce: Function = (customRules: EnforceRules = {}): EnforceInstance => {\n    const rulesObject: EnforceRules = {...rules, ...customRules};\n\n    if (typeof Proxy === 'function') {\n        return (value: AnyValue): EnforceRules => {\n            const proxy: EnforceRules = new Proxy(rulesObject, {\n                get: (rules, fnName) => {\n                    if (!isRule(rules, fnName)) { return; }\n\n                    return (...args) => {\n                        ruleRunner(rules[fnName], value, ...args);\n                        return proxy;\n                    };\n                }\n            });\n            return proxy;\n        };\n    }\n\n    // This is relatively heavier, and preferably should only be done when lacking proxy support\n    return (value) => Object.keys(rulesObject).reduce((allRules, fnName) => {\n        if (!isRule(rulesObject, fnName)) { return allRules; }\n\n        allRules[fnName] = (...args) => {\n            ruleRunner(rulesObject[fnName], value, ...args);\n            return allRules;\n        };\n\n        return allRules;\n    }, {});\n};\n\nexport default Enforce;","// @flow\nimport Passable from './core/Passable';\nimport Enforce from './Enforce';\nimport validate from './validate';\nimport { WARN, FAIL } from './constants';\n\nfunction passable(name: string, tests: TestsWrapper, specific: ?SpecificArgs) {\n    const suite: Passable = new Passable(name, tests, specific);\n    return suite.res.output;\n}\n\npassable.VERSION = PASSABLE_VERSION;\npassable.enforce = new Enforce({});\npassable.Enforce = Enforce;\npassable.validate = validate;\npassable.WARN = WARN;\npassable.FAIL = FAIL;\n\nexport default passable;","// @flow\n\n/**\n * Run tests and catch errors\n *\n * @param {function} callback The test content\n * @return {boolean}\n */\nfunction validate(test: PassableTest): boolean {\n\n    if (typeof test !== 'function' && !(test instanceof Promise)) {\n        throw new TypeError(`[Validate]: expected ${typeof test} to be a function.`);\n    }\n\n    try {\n        return test() !== false;\n    } catch (_) {\n        return false;\n    }\n}\n\nexport default validate;"],"names":["severities","Specific","specific","is","TypeError","Array","isArray","length","only","this","populateGroup","not","item","every","_typeof","hasOwnProperty","group","field","forEach","fieldName","constructorError","name","value","doc","Passable","tests","test","_this","pending","push","filter","t","res","runCompletionCallbacks","some","statement","severity","excludes","addToSkipped","operation","initFieldCounters","runTest","Promise","addPendingTest","testResult","isAsync","then","e","markAsync","done","clearPendingTest","hasRemainingPendingTests","markAsDone","fail","bumpTestCounter","completionCallbacks","asyncObject","bumpTestWarning","output","hasValidationWarnings","validationWarnings","warnCount","testsPerformed","bumpTestError","hasValidationErrors","validationErrors","failCount","testCount","skipped","hasErrors","Boolean","getErrors","hasWarnings","getWarnings","callback","after","callbacks","includes","cb","passableResult","runPendingTests","isNumber","isString","matches","regex","RegExp","inside","arg1","equals","isNumeric","result","isNaN","parseFloat","Number","isFinite","isEmpty","Object","keys","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals","lengthEquals","negativeForm","alias","rules","rule","extendRules","longerThan","longerThanOrEquals","shorterThan","shorterThanOrEquals","args","Error","Function","isRule","rulesObject","Enforce","customRules","Proxy","proxy","get","fnName","ruleRunner","reduce","allRules","passable","VERSION","PASSABLE_VERSION","enforce","validate","_","WARN","FAIL"],"mappings":"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"}