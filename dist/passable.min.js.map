{"version":3,"sources":["webpack://Passable/webpack/universalModuleDefinition","webpack://Passable/webpack/bootstrap","webpack://Passable/./node_modules/proxy-polyfill/src/proxy.js","webpack://Passable/./src/result_object/index.js","webpack://Passable/./src/constants/errors/index.js","webpack://Passable/./src/constants/modules/index.js","webpack://Passable/./src/helpers/runtime_error/index.js","webpack://Passable/./src/Specific/index.js","webpack://Passable/./src/Passable.js","webpack://Passable/./src/test_runner/index.js","webpack://Passable/./src/Enforce/runnables/compounds/run/index.js","webpack://Passable/./src/Enforce/runnables/compounds/index.js","webpack://Passable/./src/Enforce/runnables/compounds/all_of/index.js","webpack://Passable/./src/Enforce/runnables/compounds/any_of/index.js","webpack://Passable/./src/Enforce/runnables/compounds/none_of/index.js","webpack://Passable/./src/Enforce/runnables/rules/helpers/expect_type/index.js","webpack://Passable/./src/Enforce/runnables/rules/helpers/find_array_values_in_array/index.js","webpack://Passable/./src/Enforce/runnables/rules/helpers/find_array_values_in_map_keys/index.js","webpack://Passable/./src/Enforce/runnables/rules/helpers/find_val_in_array_or_string/index.js","webpack://Passable/./src/Enforce/runnables/rules/helpers/get_size/index.js","webpack://Passable/./src/Enforce/runnables/rules/helpers/is_type/index.js","webpack://Passable/./src/Enforce/runnables/rules/helpers/reduce_array_to_map/index.js","webpack://Passable/./src/Enforce/runnables/rules/lang/is_array/index.js","webpack://Passable/./src/Enforce/runnables/rules/lang/is_number/index.js","webpack://Passable/./src/Enforce/runnables/rules/lang/is_string/index.js","webpack://Passable/./src/Enforce/runnables/rules/content/matches/index.js","webpack://Passable/./src/Enforce/runnables/rules/content/inside/index.js","webpack://Passable/./src/Enforce/runnables/rules/content/is_numeric/index.js","webpack://Passable/./src/Enforce/runnables/rules/size/is_empty/index.js","webpack://Passable/./src/Enforce/runnables/rules/size/size_equals/index.js","webpack://Passable/./src/Enforce/runnables/rules/helpers/extend_negative_rules/index.js","webpack://Passable/./src/Enforce/runnables/rules/index.js","webpack://Passable/./src/Enforce/runnables/rules/size/larger_than/index.js","webpack://Passable/./src/Enforce/runnables/rules/size/smaller_than/index.js","webpack://Passable/./src/Enforce/runnables/rules/size/smaller_than_or_equals/index.js","webpack://Passable/./src/Enforce/runnables/rules/size/larger_than_or_equals/index.js","webpack://Passable/./src/Enforce/runners/compound/index.js","webpack://Passable/./src/Enforce/runners/rule/index.js","webpack://Passable/./src/Enforce/helpers/root.js","webpack://Passable/./src/Enforce/helpers/safe_proxy.js","webpack://Passable/./src/Enforce/index.js","webpack://Passable/./src/validate/index.js","webpack://Passable/./src/index.js"],"names":["root","factory","exports","module","define","amd","constructor","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ProxyPolyfill","lastRevokeFn","isObject","target","handler","TypeError","throwRevoked","trap","unsafeHandler","set","apply","construct","k","proxy","this","isMethod","isArray","usingNew","args","Array","slice","arguments","unshift","prop","setter","propertyMap","getOwnPropertyNames","forEach","desc","getOwnPropertyDescriptor","prototypeOk","setPrototypeOf","getPrototypeOf","__proto__","seal","revocable","revoke","severities","result_object","ResultObject","_classCallCheck","async","hasValidationErrors","hasValidationWarnings","failCount","warnCount","testCount","testsPerformed","validationErrors","validationWarnings","skipped","completionCallbacks","fieldName","statement","push","severity","includes","bumpTestWarning","bumpTestError","_this","cb","callback","INVALID_FORM_NAME","ENFORCE_FAILED","EXPECT_TYPE_FAILURE","MISSING_ARGUMENT_TESTS","UNEXPECTED_ARGUMENT_SPECIFIC","VALIDATE_UNEXPECTED_TEST","PASSABLE","ENFORCE","VALIDATE","passableConstructor","concat","modules_namespaceObject","errorBuilder","functionName","errorMessage","unexpectedArgs","type","position","runtime_error","errors_namespaceObject","length","undefined","Error","val","JSON","stringify","src_Specific","Specific","specific","Specific_classCallCheck","is","_typeof","only","populateGroup","not","group","field","item","every","src_Passable","Passable","tests","Passable_classCallCheck","_defineProperty","test","pending","filter","res","runCompletionCallbacks","excludes","addToSkipped","initFieldCounters","Promise","addPendingTest","_toConsumableArray","markAsync","done","clearPendingTest","fail","then","e","testRunnerAsync","isValid","valid","testRunner","bumpTestCounter","Passable_typeof","runPendingTests","run","rules","compounds","allOf","validations","keys","anyOf","some","noneOf","expect_type","is_type","find_array_values_in_array","values","array","reducedArray","reduce_array_to_map","find_array_values_in_map_keys","map","element","has","find_val_in_array_or_string","container","indexOf","get_size","isNaN","get_size_typeof","_len","types","_key","is_type_typeof","reduce","acc","Map","expect","negativeForm","is_array","isNumber","is_number","isString","is_string","matches","regex","RegExp","content_matches","inside","arg1","content_inside","isNumeric","parseFloat","isFinite","is_numeric","isEmpty","is_empty","sizeEquals","runnables_rules","_loop","rule","largerThan","smallerThan","smallerThanOrEquals","largerThanOrEquals","runners_compound","allRules","runner","compound_typeof","runners_rule","rule_typeof","window","helpers_root","safe_proxy","Proxy","proxy_default","Enforce_Enforce","Enforce","customRules","Enforce_classCallCheck","Enforce_defineProperty","allRunnables","fnName","runners_namespaceObject","assign","enforce","src_Enforce","src_validate","validate_typeof","_","passable","VERSION","version","validate","WARN","FAIL","__webpack_exports__"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,SAAAD,IAEAD,EAAA,SAAAC,IARA,EASC,OAAAK,YAAA,4BACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,mBClEAtC,EAAAD,QAAA,WACA,IACAwC,EADAC,EAAA,KAOA,SAAAC,EAAAzB,GACA,QAAAA,IAAA,iBAAAA,GAAA,mBAAAA,GA+IA,OAvIAuB,EAAA,SAAAG,EAAAC,GACA,IAAAF,EAAAC,KAAAD,EAAAE,GACA,UAAAC,UAAA,8DAMA,IAAAC,EAAA,aACAL,EAAA,WACAK,EAAA,SAAAC,GACA,UAAAF,6BAA+CE,yCAM/C,MAAAC,EAAAJ,EACAA,GAAevB,IAAA,KAAA4B,IAAA,KAAAC,MAAA,KAAAC,UAAA,MACf,QAAAC,KAAAJ,EAAA,CACA,KAAAI,KAAAR,GACA,UAAAC,mDAAqEO,MAErER,EAAAQ,GAAAJ,EAAAI,GAEA,mBAAAJ,IAGAJ,EAAAM,MAAAF,EAAAE,MAAAlB,KAAAgB,IAKA,IAAAK,EAAAC,KACAC,GAAA,EACAC,GAAA,EACA,mBAAAb,GACAU,EAAA,WACA,MAAAI,EAAAH,WAAAlD,cAAAiD,EACAK,EAAAC,MAAAvB,UAAAwB,MAAAjD,KAAAkD,WAGA,GAFAf,EAAAW,EAAA,qBAEAA,GAAAb,EAAA,UACA,OAAAA,EAAA,UAAAjC,KAAA2C,KAAAX,EAAAe,GACS,IAAAD,GAAAb,EAAAM,MACT,OAAAN,EAAAM,MAAAP,EAAAW,KAAAI,GAIA,GAAAD,EAAA,CAKA,OAHAC,EAAAI,QAAAnB,GAGA,IADyCA,EAAAX,KAAAkB,MAAAP,EAAAe,IAGzC,OAAAf,EAAAO,MAAAI,KAAAI,IAEAH,GAAA,GACKZ,aAAAgB,QACLN,KACAG,GAAA,GAKA,MAAAxC,EAAA4B,EAAAvB,IAAA,SAAA0C,GAEA,OADAjB,EAAA,OACAF,EAAAvB,IAAAiC,KAAAS,EAAAV,IACK,SAAAU,GAEL,OADAjB,EAAA,OACAQ,KAAAS,IAEAC,EAAApB,EAAAK,IAAA,SAAAc,EAAAtC,GACAqB,EAAA,OACAF,EAAAK,IAAAK,KAAAS,EAAAtC,EAAA4B,IAMK,SAAAU,EAAAtC,GACLqB,EAAA,OACAQ,KAAAS,GAAAtC,GAKAwC,KADA/C,OAAAgD,oBAAAvB,GAEAwB,QAAA,SAAAJ,GACA,IAAAR,GAAAC,IAAAO,KAAAV,EACA,OAEA,MACAe,GACAhD,aAFAF,OAAAmD,yBAAA1B,EAAAoB,GAEA3C,WACAC,IAAAL,EAAAgB,KAAAW,EAAAoB,GACAd,IAAAe,EAAAhC,KAAAW,EAAAoB,IAEA7C,OAAAC,eAAAkC,EAAAU,EAAAK,GACAH,EAAAF,IAAA,IAMA,IAAAO,GAAA,EAQA,GAPApD,OAAAqD,eACArD,OAAAqD,eAAAlB,EAAAnC,OAAAsD,eAAA7B,IACKU,EAAAoB,UACLpB,EAAAoB,UAAA9B,EAAA8B,UAEAH,GAAA,EAEA1B,EAAAvB,MAAAiD,EACA,QAAAlB,KAAAT,EACAsB,EAAAb,IAGAlC,OAAAC,eAAAkC,EAAAD,GAAyC/B,IAAAL,EAAAgB,KAAAW,EAAAS,KAQzC,OAHAlC,OAAAwD,KAAA/B,GACAzB,OAAAwD,KAAArB,GAEAA,IAGAsB,UAAA,SAAAhC,EAAAC,GAEA,OAAYS,MADZ,IAAAb,EAAAG,EAAAC,GACYgC,OAAAnC,IAGZD,uxBCtKO,IAEDqC,GAFwB,OACA,QAyMfC,aA/LX,SAAAC,EAAYhE,gGAAciE,CAAA1B,KAAAyB,GACtBzB,KAAK2B,OAAQ,EACb3B,KAAKvC,KAAOA,EACZuC,KAAK4B,qBAAsB,EAC3B5B,KAAK6B,uBAAwB,EAC7B7B,KAAK8B,UAAY,EACjB9B,KAAK+B,UAAY,EACjB/B,KAAKgC,UAAY,EACjBhC,KAAKiC,kBACLjC,KAAKkC,oBACLlC,KAAKmC,sBACLnC,KAAKoC,WACLpC,KAAKqC,wHAQSC,GACd,OAAItC,KAAKiC,eAAeK,GAAqBtC,MAE7CA,KAAKiC,eAAeK,IAChBN,UAAW,EACXF,UAAW,EACXC,UAAW,GAGR/B,8CAQKsC,GACZ,OAAKtC,KAAKiC,eAAeK,IAEzBtC,KAAKiC,eAAeK,GAAWN,YAC/BhC,KAAKgC,YAEEhC,MALuCA,6CAalCsC,EAAmBC,GAC/BvC,KAAK6B,uBAAwB,EAC7B7B,KAAKmC,mBAAmBG,GAAatC,KAAKmC,mBAAmBG,OAC7DtC,KAAKmC,mBAAmBG,GAAWE,KAAKD,GACxCvC,KAAK+B,YACL/B,KAAKiC,eAAeK,GAAWP,kDAQrBO,EAAmBC,GAC7BvC,KAAK4B,qBAAsB,EAC3B5B,KAAKkC,iBAAiBI,GAAatC,KAAKkC,iBAAiBI,OACzDtC,KAAKkC,iBAAiBI,GAAWE,KAAKD,GACtCvC,KAAK8B,YACL9B,KAAKiC,eAAeK,GAAWR,yCAU9BQ,EAAmBC,EAAmBE,GACvC,OAAKzC,KAAKiC,eAAeK,IA3FH,UA6FaG,GAAYlB,EAAWmB,SAASD,GAAYA,EA5FzD,QA+FhBzC,KAAK2C,gBAAgBL,EAAWC,GAChCvC,KAAK4C,cAAcN,EAAWC,GAE7BvC,MARuCA,0CAgBrCsC,GAGT,OAFCtC,KAAKoC,QAAQM,SAASJ,IAActC,KAAKoC,QAAQI,KAAKF,GAEhDtC,sDAOc,IAAA6C,EAAA7C,KACrBA,KAAKqC,oBAAoBxB,QAAQ,SAACiC,GAAD,OAAQA,EAAGD,kCAS3CE,GACD,MAAwB,mBAAbA,EAAiC/C,MAEvCA,KAAK2B,OACNoB,EAAS/C,MAGbA,KAAKqC,oBAAoBG,KAAKO,GACvB/C,0CASP,OADAA,KAAK2B,OAAQ,EACN3B,uCAQDsC,GACN,OAAKA,EAIDtC,KAAKkC,iBAAiBI,GACftC,KAAKkC,iBAAiBI,MAJtBtC,KAAKkC,qDAeRI,GACR,OAAKA,EAIDtC,KAAKmC,mBAAmBG,GACjBtC,KAAKmC,mBAAmBG,MAJxBtC,KAAKmC,4BC3KXa,EAA4B,IAC5BC,EAAyB,IACzBC,EAA8B,IAC9BC,EAAiC,IACjCC,EAAuC,IACvCC,EAAmC,ICLnCC,EAAmB,WACnBC,EAAkB,UAClBC,EAAmB,WCF1BC,EAA2B,GAAAC,OAAMC,EAAQL,SAAd,gBAEjC,SAASM,EAAaC,EAAcC,GAChC,UAAAJ,OAAWC,EAAQL,SAAnB,0BAAAI,OAAoDG,EAApD,OAAAH,OAAsEI,GAG1E,SAASC,EAAeC,EAAMvG,EAAMwG,GAChC,qBAAAP,OAAsBM,EAAtB,iBAAAN,OAA2CjG,EAA3C,kBAAAiG,OAAiEO,EAAjE,sCAuBW,IAAAC,EApBf,SAAsBF,GAClB,OAAQA,GACJ,KAAKG,EAAOnB,kBACR,OAAO,IAAIzD,UAAUqE,EAAaH,EAAD,eAAAC,OAAAnD,UAAA6D,QAAA,OAAAC,EAAA9D,UAAA,4BACrC,KAAK4D,EAAOlB,eACR,OAAO,IAAIqB,MAAMV,EAAaD,EAAQJ,QAAT,GAAAG,OAAAnD,UAAA6D,QAAA,OAAAC,EAAA9D,UAAA,kBAAAmD,OAAAnD,UAAA6D,QAAA,OAAAC,EAAA9D,UAAA,gBACjC,KAAK4D,EAAOjB,oBACR,IAAMqB,EAAclE,MAAMH,QAANK,UAAA6D,QAAA,OAAAC,EAAA9D,UAAA,IAAyBiE,KAAKC,UAALlE,UAAA6D,QAAA,OAAAC,EAAA9D,UAAA,IAAzBA,UAAA6D,QAAA,OAAAC,EAAA9D,UAAA,GACpB,OAAO,IAAIhB,UAAUqE,EAAYrD,UAAA6D,QAAA,OAAAC,EAAA9D,UAAA,eAAAmD,OAAsBa,EAAtB,aAAAb,OAAAnD,UAAA6D,QAAA,OAAAC,EAAA9D,UAAA,UACrC,KAAK4D,EAAOhB,uBACR,OAAO,IAAI5D,UAAUqE,EAAaH,EAAqBM,EAAcxD,UAAA6D,QAAA,OAAAC,EAAA9D,UAAA,GAAU,QAAS,KAC5F,KAAK4D,EAAOf,6BACR,OAAO,IAAI7D,UAAUqE,EAAaH,EAAqBM,EAAcxD,UAAA6D,QAAA,OAAAC,EAAA9D,UAAA,GAAU,WAAY,KAC/F,KAAK4D,EAAOd,yBACR,OAAO,IAAI9D,UAAUqE,EAAaD,EAAQH,SAAT,YAAAE,OAAAnD,UAAA6D,QAAA,OAAAC,EAAA9D,UAAA,kCACrC,QACI,OAAO,IAAI+D,MAAMV,EAAaD,EAAQL,SAAU,waCyE7CoB,aAvFX,SAAAC,EAAYC,GAER,+FAFiCC,CAAA7E,KAAA2E,GAE5BC,EAAL,CAEA,IAAKD,EAASG,GAAGF,GACb,MAAMV,EAAaC,EAAOf,6BAAR2B,EAA6CH,IAGnE,GAAwB,iBAAbA,GAAyBvE,MAAMH,QAAQ0E,GAAlD,CACI,GAAwB,IAApBA,EAASR,OAAgB,OAC7BpE,KAAKgF,KAAOhF,KAAKiF,cAAcjF,KAAKgF,KAAMJ,QAI1CA,EAASI,OACThF,KAAKgF,KAAOhF,KAAKiF,cAAcjF,KAAKgF,KAAMJ,EAASI,OAGnDJ,EAASM,MACTlF,KAAKkF,IAAMlF,KAAKiF,cAAcjF,KAAKkF,IAAKN,EAASM,oGAW3CC,EAAsBC,GAShC,OARAD,EAAQA,MAEa,iBAAVC,EACPD,EAAMC,IAAS,EACR/E,MAAMH,QAAQkF,IACrBA,EAAMvE,QAAQ,SAACwE,GAAD,OAAUF,EAAME,IAAQ,IAGnCF,mCAUF7C,GACL,SAAItC,KAAKgF,MAAShF,KAAKgF,KAAK1C,QAIxBtC,KAAKkF,MAAOlF,KAAKkF,IAAI5C,iCAcnB+C,GACN,OAAIhF,MAAMH,QAAQmF,GACPA,EAAKC,MAAM,SAACD,GAAD,MAA0B,iBAATA,IAGnB,iBAATA,KAEE,OAATA,GAAiC,WAAhBN,EAAOM,KACxBA,EAAKtG,eAAe,UACjBsG,EAAKtG,eAAe,usBCoBpBwG,EAxFX,SAAAC,EAAY/H,EAAcgI,EAAqBb,GAAyB,IAAA/B,EAAA7C,KAEpE,+FAFoE0F,CAAA1F,KAAAwF,GAAAG,EAAA3F,KAAA,cAAA2F,EAAA3F,KAAA,iBAkBvD,SAAC4F,GAAD,OAAwB/C,EAAKgD,QAAQrD,KAAKoD,KAlBaD,EAAA3F,KAAA,mBAmBrD,SAAC4F,GAGhB/C,EAAKgD,QAAUhD,EAAKgD,QAAQC,OAAO,SAAC1H,GAAD,OAA8BA,IAAMwH,IAC3C,IAAxB/C,EAAKgD,QAAQzB,QACbvB,EAAKkD,IAAIC,2BAxBuDL,EAAA3F,KAAA,OAmCjE,SAACsC,EAAmBC,EAAmBqD,EAAoBnD,GAE1DI,EAAK+B,SAASqB,SAAS3D,GACvBO,EAAKkD,IAAIG,aAAa5D,IAI1BO,EAAKkD,IAAII,kBAAkB7D,IAEP,mBAATsD,GAAyBA,aAAgBQ,WAIpDR,EAAKtD,UAAYA,EACjBsD,EAAKrD,UAAYA,EACjBqD,EAAKnD,SAAWA,EAEhBI,EAAKwD,eAAeT,OApDgDD,EAAA3F,KAAA,kBA0DtD,WACdsG,EAAIzD,EAAKgD,SAAShF,QAAQ,SAAC+E,GACvB,GAAIA,aAAgBQ,QAAS,CAEzBvD,EAAKkD,IAAIQ,YAET,IAAMC,EAAiB,WACnB3D,EAAK4D,iBAAiBb,KClE1C,SAAyBA,EAAgBY,EAAgBE,GACrD,IACId,EAAKe,KAAKH,EAAME,GAClB,MAAOE,GACLF,KDuEQG,CAAgBjB,EAAMY,EANC,WAEnB3D,EAAKkD,IAAIW,KAAKd,EAAKtD,UAAWsD,EAAKrD,UAAWqD,EAAKnD,UACnD+D,WC7FpB,SAAoBZ,GAEhB,IAAIkB,EAA0B,KAE9B,IACI,IAAMf,EAA0BH,IAG5BkB,OADe,IAARf,GAA+B,OAARA,GAAgBA,EAAIhH,eAAe,SACvDgH,EAAIgB,MACQ,kBAARhB,GACJA,IAAO,EAIvB,MAAOa,GACLE,GAAU,EAGd,QAASA,GDgF4BE,CAAWpB,IAGhC/C,EAAKkD,IAAIW,KAAKd,EAAKtD,UAAWsD,EAAKrD,UAAWqD,EAAKnD,UAEvDI,EAAK4D,iBAAiBb,GAE1B/C,EAAKkD,IAAIkB,gBAAgBrB,EAAKtD,eAjFd,iBAAT7E,EACP,MAAMyG,EAAaC,EAAOnB,kBAARkE,EAAkCzJ,IAGxD,GAAqB,mBAAVgI,EACP,MAAMvB,EAAaC,EAAOhB,uBAAR+D,EAAuCzB,IAG7DzF,KAAK4E,SAAW,IAAIF,EAASE,GAE7B5E,KAAK+F,IAAM,IAAIvE,EAAa/D,GAE5BgI,EAAMzF,KAAK4F,MACX5F,KAAKmH,mBE1BE,SAASC,EAAIjJ,EAAiBM,EAAagH,EAA2B4B,GAEjF,GAA0B,mBAAfA,EAAM5I,GACb,MAA0B,mBAAfgH,EAAMhH,IACNgH,EAAMhH,GAAKN,GAM1B,IAAMiC,EAAcqF,EAAMhH,GAE1B,OAAO4I,EAAM5I,GAAKN,EAAOiC,GCnBd,IAAAkH,GACXC,MCHW,SAAepJ,EAAcsH,EAA2B4B,GAEnE,IAAMG,EAA6B5J,OAAO6J,KAAKhC,GAE/C,OAA2B,IAAvB+B,EAAYpD,QAIToD,EAAYlC,MAAM,SAAC7G,GAAD,OAA2C,IAAlC2I,EAAIjJ,EAAOM,EAAKgH,EAAO4B,MDJzDK,MEJW,SAAevJ,EAAcsH,EAA2B4B,GAGnE,OADmCzJ,OAAO6J,KAAKhC,GAC5BkC,KAAK,SAAClJ,GAAD,OAA2C,IAAlC2I,EAAIjJ,EAAOM,EAAKgH,EAAO4B,MFExDO,OGLW,SAAgBzJ,EAAcsH,EAA2B4B,GAEpE,IAAMG,EAA6B5J,OAAO6J,KAAKhC,GAE/C,OAA2B,IAAvB+B,EAAYpD,QAIToD,EAAYlC,MAAM,SAAC7G,GAAD,OAA2C,IAAlC2I,EAAIjJ,EAAOM,EAAKgH,EAAO4B,OCG9C,IAAAQ,EARf,SAAoB1J,EAAiB6F,EAAcH,GAC/C,IAAKiE,EAAO3J,EAAO6F,GACf,MAAME,EAAaC,EAAOjB,oBAAqBW,EAAc1F,EAAO6F,GAGxE,OAAO,GCKI,IAAA+D,EAPf,SAAgCC,EAAeC,GAC3C,IAAMC,EAAwBC,EAAiBF,GAG/C,OAF6BG,EAAyBJ,EAAQE,ICJnD,IAAAE,EALf,SAAkCH,EAA0BI,GACxD,QAAKA,GACEJ,EAAM3C,MAAM,SAACgD,GAAD,OAAaD,GAAOA,EAAIE,IAAID,MCCpC,IAAAE,EAJf,SAAgCrK,EAA0BsK,GACtD,OAAOA,EAAUC,QAAQvK,IAAU,wOCcxB,IAAAwK,EAff,SAAiBxK,GAEb,OAAKA,EAEuB,iBAAVA,GAAuByK,MAAMzK,GAEpCA,EAAMY,eAAe,UACrBZ,EAAMiG,OACW,WAAjByE,EAAO1K,GACPP,OAAO6J,KAAKtJ,GAAOiG,OAEnB,EANAjG,EAFA,wOCgBA,IAAA2J,EAJf,SAAgB3J,GAAgD,QAAA2K,EAAAvI,UAAA6D,OAA/B2E,EAA+B,IAAA1I,MAAAyI,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAA/BD,EAA+BC,EAAA,GAAAzI,UAAAyI,GAC5D,OAAOD,EAAMpB,KAAK,SAAC3D,GAAD,MAAmB,UAATA,EAAmB3D,MAAMH,QAAQ/B,GAAU8K,EAAO9K,KAAU6F,KCR7E,IAAAmE,EAPf,SAA0BF,GACtB,OAAOA,EAAMiB,OAAO,SAACC,EAAK5E,GAEzB,OADG4E,EAAIxJ,IAAI4E,GAAK,GACT4E,GACL,IAAIC,MCHX,SAASlJ,EAAQ/B,GAA+C,IAAjCkL,IAAiC9I,UAAA6D,OAAA,QAAAC,IAAA9D,UAAA,KAAAA,UAAA,GAE5D,OADAsH,EAAWwB,EAAQ,UAAW,WACvBvB,EAAO3J,EAAO,WAAakL,EAGtCnJ,EAAQoJ,aAAe,aAER,IAAAC,EAAA,ECNf,SAASC,EAASrL,GAA+C,IAAjCkL,IAAiC9I,UAAA6D,OAAA,QAAAC,IAAA9D,UAAA,KAAAA,UAAA,GAE7D,OADAsH,EAAWwB,EAAQ,UAAW,YACvBvB,EAAO3J,EAAO,YAAckL,EAGvCG,EAASF,aAAe,cAET,IAAAG,EAAA,ECRf,SAASC,EAASvL,GAA+C,IAAjCkL,IAAiC9I,UAAA6D,OAAA,QAAAC,IAAA9D,UAAA,KAAAA,UAAA,GAE7D,OADAsH,EAAWwB,EAAQ,UAAW,YACvBvB,EAAO3J,EAAO,YAAckL,EAGvCK,EAASJ,aAAe,cAET,IAAAK,EAAA,ECPf,SAASC,EAAQzL,EAAe0L,GAE5B,OAAIA,aAAiBC,OACVD,EAAMjE,KAAKzH,KACX2J,EAAO+B,EAAO,WACd,IAAIC,OAAOD,GAAOjE,KAAKzH,GAMtCyL,EAAQN,aAAe,aAER,IAAAS,EAAA,ECJf,SAASC,EAAO7L,EAAc8L,GAE1B,GAAI5J,MAAMH,QAAQ+J,GAAO,CAErB,GAAInC,EAAO3J,EAAO,SAAU,SAAU,WAClC,OAAOqK,EAAuBrK,EAAO8L,GAEzC,GAAI5J,MAAMH,QAAQ/B,GACd,OAAO4J,EAAuB5J,EAAO8L,GAK7C,SAAInC,EAAOmC,EAAM,YAAanC,EAAO3J,EAAO,YACjCqK,EAAuBrK,EAAO8L,GAM7CD,EAAOV,aAAe,YAEP,IAAAY,EAAA,EC9Bf,SAASC,EAAUhM,GAA+C,IAAjCkL,IAAiC9I,UAAA6D,OAAA,QAAAC,IAAA9D,UAAA,KAAAA,UAAA,GAI9D,OAHAsH,EAAWwB,EAAQ,UAAW,eAELT,MAAMwB,WAAWjM,KAAWkM,SAASlM,MAC5CkL,EAGtBc,EAAUb,aAAe,eAEV,IAAAgB,EAAA,ECVf,SAASC,EAAQpM,GAA+C,IAAjCkL,IAAiC9I,UAAA6D,OAAA,QAAAC,IAAA9D,UAAA,KAAAA,UAAA,GAG5D,OAFAsH,EAAWwB,EAAQ,UAAW,WAEH,IAAnBV,EAAQxK,KAAkBkL,EAGtCkB,EAAQjB,aAAe,aAER,IAAAkB,EAAA,ECRf,SAASC,GAAWtM,EAAc8L,GAC9B,OAAOtB,EAAQxK,KAAW8L,EAG9BQ,GAAWnB,aAAe,gBCeX,ICQAoB,GDrBf,SAA6BrD,GAAqB,IAAAsD,EAAA,SAEnCC,GACP,IAAMtB,EAAuBjC,EAAMuD,GAAMtB,aAErCA,IACAjC,EAAMiC,GAAgB,kBAAcjC,EAAMuD,GAANhL,MAAAyH,EAAK9G,cAJjD,IAAK,IAAMqK,KAAgBvD,EAAOsD,EAAvBC,GAQX,OAAOvD,ECWI,EAdXnH,QAAAqJ,EACAC,SAAAC,EACAC,SAAAC,EACAC,QAAAG,EACAC,OAAAE,EACAC,UAAAG,EACAC,QAAAC,EACAK,WCpBJ,SAAoB1M,EAAc8L,GAC9B,OAAOtB,EAAQxK,GAAS8L,GDoBxBa,YErBJ,SAAqB3M,EAAc8L,GAC/B,OAAOtB,EAAQxK,GAAS8L,GFqBxBc,oBGtBJ,SAA6B5M,EAAc8L,GACvC,OAAOtB,EAAQxK,IAAU8L,GHsBzBe,mBIvBJ,SAA4B7M,EAAc8L,GACtC,OAAOtB,EAAQxK,IAAU8L,GJuBzBQ,WFlBW,4OOYA,IAAAQ,GARf,SAAkBC,EAAwBC,EAAgBhN,EAAiBsH,GACvE,GAAsB,mBAAX0F,IAE4B,IAAnCA,EAAOhN,EAAOsH,EAAOyF,GACrB,MAAMhH,EAAaC,EAAOlB,eAAgBkI,EAAO1N,KAA/B2N,GAA4CjN,4OCIvD,ICrBX3B,GDqBW6O,GATf,SAAcT,EAAmBzM,GAE7B,GAAoB,mBAATyM,EAAX,CAFuE,QAAA9B,EAAAvI,UAAA6D,OAAtBhE,EAAsB,IAAAC,MAAAyI,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAtB5I,EAAsB4I,EAAA,GAAAzI,UAAAyI,GAIvE,IAA6B,IAAzB4B,EAAIhL,WAAJ,GAAKzB,GAALuF,OAAetD,IACf,MAAM8D,EAAaC,EAAOlB,eAAgB2H,EAAKnN,KAA7B6N,GAA0CnN,yBCdpE,IACI3B,GAAQ,aAAiBM,YAAY,cAA7B,GACV,MAAO8J,GACLpK,GAAO+O,OAGI,IAAAC,GAAA,GCIA,IAAAC,GAVf,SAAmBpM,EAAQC,GAEvB,OAAKkM,GAAKE,MAKH,IAAIA,MAAMrM,EAAQC,GAHd,IADeqM,OACf,CAAkBtM,EAAQC,QCDnCsM,GAKF,SAAAC,IAA4C,IAAAhJ,EAAA7C,KAAhC8L,EAAgCvL,UAAA6D,OAAA,QAAAC,IAAA9D,UAAA,GAAAA,UAAA,MAIxC,mGAJwCwL,CAAA/L,KAAA6L,gHAAAG,CAAAhM,KAAA,UAOlC,SAAC7B,GACP,IAAM4B,EAAsB0L,GAAU5I,EAAKoJ,cACvClO,IAAK,SAACkO,EAAcC,GAEhB,OAAIrJ,EAAKwE,MAAMtI,eAAemN,IAAyC,mBAAvBrJ,EAAKwE,MAAM6E,GAChD,WAAa,QAAApD,EAAAvI,UAAA6D,OAAThE,EAAS,IAAAC,MAAAyI,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAT5I,EAAS4I,GAAAzI,UAAAyI,GAEhB,OADAqC,GAAAzL,MAAAuM,GAAatJ,EAAKwE,MAAM6E,GAAS/N,GAA1BuF,OAAoCtD,IACpCL,GAEJuH,EAAoBvI,eAAemN,IAAkD,mBAAhC5E,EAAoB4E,GACzE,SAACzG,GAEJ,OADAwF,GAAiBpI,EAAKwE,MAAOC,EAAoB4E,GAAS/N,EAAOsH,GAC1D1F,GAGJkM,EAAaC,MAIhC,OAAOnM,IAzBPC,KAAKqH,MAAQzJ,OAAOwO,UAAW1B,GAAiBoB,GAChD9L,KAAKiM,aAAerO,OAAOwO,UAAW9E,EAAqBtH,KAAKqH,OAEzDrH,KAAKqM,SA0BdA,GAA2B,IAAIT,OAEtBU,GAAA,0OCpBA,IAAAC,GAbf,SAAkB3G,GAEd,GAAoB,mBAATA,KAAyBA,aAAgBQ,SAChD,MAAMlC,EAAaC,EAAOd,yBAARmJ,GAAyC5G,IAG/D,IACI,OAAkB,IAAXA,IACT,MAAO6G,GACL,OAAO,YCZf,SAASC,GAASjP,EAAcgI,EAAqBb,GAEjD,OADwB,IAAIW,EAAS9H,EAAMgI,EAAOb,GACrCmB,IAGjB2G,GAASC,QAAUC,GAAA,EACnBF,GAASL,QAAUA,GACnBK,GAASb,QAAUS,GACnBI,GAASG,SAAWN,GACpBG,GAASI,KvCdqB,OuCe9BJ,GAASK,KvCdqB,OuCgBfC,EAAA","file":"passable.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Passable\"] = factory();\n\telse\n\t\troot[\"Passable\"] = factory();\n})(((() => 0).constructor(\"return this\"))(), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nmodule.exports = function proxyPolyfill() {\n  let lastRevokeFn = null;\n  let ProxyPolyfill;\n\n  /**\n   * @param {*} o\n   * @return {boolean} whether this is probably a (non-null) Object\n   */\n  function isObject(o) {\n    return o ? (typeof o === 'object' || typeof o === 'function') : false;\n  }\n\n  /**\n   * @constructor\n   * @param {!Object} target\n   * @param {{apply, construct, get, set}} handler\n   */\n  ProxyPolyfill = function(target, handler) {\n    if (!isObject(target) || !isObject(handler)) {\n      throw new TypeError('Cannot create proxy with a non-object as target or handler');\n    }\n\n    // Construct revoke function, and set lastRevokeFn so that Proxy.revocable can steal it.\n    // The caller might get the wrong revoke function if a user replaces or wraps scope.Proxy\n    // to call itself, but that seems unlikely especially when using the polyfill.\n    let throwRevoked = function() {};\n    lastRevokeFn = function() {\n      throwRevoked = function(trap) {\n        throw new TypeError(`Cannot perform '${trap}' on a proxy that has been revoked`);\n      };\n    };\n\n    // Fail on unsupported traps: Chrome doesn't do this, but ensure that users of the polyfill\n    // are a bit more careful. Copy the internal parts of handler to prevent user changes.\n    const unsafeHandler = handler;\n    handler = { 'get': null, 'set': null, 'apply': null, 'construct': null };\n    for (let k in unsafeHandler) {\n      if (!(k in handler)) {\n        throw new TypeError(`Proxy polyfill does not support trap '${k}'`);\n      }\n      handler[k] = unsafeHandler[k];\n    }\n    if (typeof unsafeHandler === 'function') {\n      // Allow handler to be a function (which has an 'apply' method). This matches what is\n      // probably a bug in native versions. It treats the apply call as a trap to be configured.\n      handler.apply = unsafeHandler.apply.bind(unsafeHandler);\n    }\n\n    // Define proxy as this, or a Function (if either it's callable, or apply is set).\n    // TODO(samthor): Closure compiler doesn't know about 'construct', attempts to rename it.\n    let proxy = this;\n    let isMethod = false;\n    let isArray = false;\n    if (typeof target === 'function') {\n      proxy = function ProxyPolyfill() {\n        const usingNew = (this && this.constructor === proxy);\n        const args = Array.prototype.slice.call(arguments);\n        throwRevoked(usingNew ? 'construct' : 'apply');\n\n        if (usingNew && handler['construct']) {\n          return handler['construct'].call(this, target, args);\n        } else if (!usingNew && handler.apply) {\n          return handler.apply(target, this, args);\n        }\n\n        // since the target was a function, fallback to calling it directly.\n        if (usingNew) {\n          // inspired by answers to https://stackoverflow.com/q/1606797\n          args.unshift(target);  // pass class as first arg to constructor, although irrelevant\n          // nb. cast to convince Closure compiler that this is a constructor\n          const f = /** @type {!Function} */ (target.bind.apply(target, args));\n          return new f();\n        }\n        return target.apply(this, args);\n      };\n      isMethod = true;\n    } else if (target instanceof Array) {\n      proxy = [];\n      isArray = true;\n    }\n\n    // Create default getters/setters. Create different code paths as handler.get/handler.set can't\n    // change after creation.\n    const getter = handler.get ? function(prop) {\n      throwRevoked('get');\n      return handler.get(this, prop, proxy);\n    } : function(prop) {\n      throwRevoked('get');\n      return this[prop];\n    };\n    const setter = handler.set ? function(prop, value) {\n      throwRevoked('set');\n      const status = handler.set(this, prop, value, proxy);\n      // TODO(samthor): If the calling code is in strict mode, throw TypeError.\n      // if (!status) {\n        // It's (sometimes) possible to work this out, if this code isn't strict- try to load the\n        // callee, and if it's available, that code is non-strict. However, this isn't exhaustive.\n      // }\n    } : function(prop, value) {\n      throwRevoked('set');\n      this[prop] = value;\n    };\n\n    // Clone direct properties (i.e., not part of a prototype).\n    const propertyNames = Object.getOwnPropertyNames(target);\n    const propertyMap = {};\n    propertyNames.forEach(function(prop) {\n      if ((isMethod || isArray) && prop in proxy) {\n        return;  // ignore properties already here, e.g. 'bind', 'prototype' etc\n      }\n      const real = Object.getOwnPropertyDescriptor(target, prop);\n      const desc = {\n        enumerable: !!real.enumerable,\n        get: getter.bind(target, prop),\n        set: setter.bind(target, prop),\n      };\n      Object.defineProperty(proxy, prop, desc);\n      propertyMap[prop] = true;\n    });\n\n    // Set the prototype, or clone all prototype methods (always required if a getter is provided).\n    // TODO(samthor): We don't allow prototype methods to be set. It's (even more) awkward.\n    // An alternative here would be to _just_ clone methods to keep behavior consistent.\n    let prototypeOk = true;\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(proxy, Object.getPrototypeOf(target));\n    } else if (proxy.__proto__) {\n      proxy.__proto__ = target.__proto__;\n    } else {\n      prototypeOk = false;\n    }\n    if (handler.get || !prototypeOk) {\n      for (let k in target) {\n        if (propertyMap[k]) {\n          continue;\n        }\n        Object.defineProperty(proxy, k, { get: getter.bind(target, k) });\n      }\n    }\n\n    // The Proxy polyfill cannot handle adding new properties. Seal the target and proxy.\n    Object.seal(target);\n    Object.seal(proxy);\n\n    return proxy;  // nb. if isMethod is true, proxy != this\n  };\n\n  ProxyPolyfill.revocable = function(target, handler) {\n    const p = new ProxyPolyfill(target, handler);\n    return { 'proxy': p, 'revoke': lastRevokeFn };\n  };\n\n  return ProxyPolyfill;\n}","// @flow\n\nexport const WARN: Severity = 'warn';\nexport const FAIL: Severity = 'fail';\nconst severities: Array<Severity> = [WARN, FAIL];\n\n/** Class representing validation state. */\nclass ResultObject {\n    /**\n     * Initialize validation object\n     * @param {string} name - The name of the current data object.\n     * @return {Object} Current instance\n     */\n    constructor(name: string) {\n        this.async = false;\n        this.name = name;\n        this.hasValidationErrors = false;\n        this.hasValidationWarnings = false;\n        this.failCount = 0;\n        this.warnCount = 0;\n        this.testCount = 0;\n        this.testsPerformed = {};\n        this.validationErrors = {};\n        this.validationWarnings = {};\n        this.skipped = [];\n        this.completionCallbacks = [];\n    }\n\n    /**\n     * Initializes specific field's counters\n     * @param {string} fieldName - The name of the field.\n     * @return {Object} Current instance\n     */\n    initFieldCounters(fieldName: string) {\n        if (this.testsPerformed[fieldName]) { return this; }\n\n        this.testsPerformed[fieldName] = {\n            testCount: 0,\n            failCount: 0,\n            warnCount: 0\n        };\n\n        return this;\n    }\n\n    /**\n     * Bumps test counters\n     * @param {string} fieldName - The name of the field.\n     * @return {Object} Current instance\n     */\n    bumpTestCounter(fieldName: string) {\n        if (!this.testsPerformed[fieldName]) { return this; }\n\n        this.testsPerformed[fieldName].testCount++;\n        this.testCount++;\n\n        return this;\n    }\n\n    /**\n     * Bumps field's warning counts and adds warning string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    bumpTestWarning(fieldName: string, statement: string) {\n        this.hasValidationWarnings = true;\n        this.validationWarnings[fieldName] = this.validationWarnings[fieldName] || [];\n        this.validationWarnings[fieldName].push(statement);\n        this.warnCount++;\n        this.testsPerformed[fieldName].warnCount++;\n    }\n\n    /**\n     * Bumps field's error counts and adds error string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    bumpTestError(fieldName: string, statement: string) {\n        this.hasValidationErrors = true;\n        this.validationErrors[fieldName] = this.validationErrors[fieldName] || [];\n        this.validationErrors[fieldName].push(statement);\n        this.failCount++;\n        this.testsPerformed[fieldName].failCount++;\n    }\n\n    /**\n     * Fails a field and updates object accordingly\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     * @param {string} severity - Whether it is a `fail` or `warn` test.\n     * @return {Object} Current instance\n     */\n    fail(fieldName: string, statement: string, severity: Severity) {\n        if (!this.testsPerformed[fieldName]) { return this; }\n\n        const selectedSeverity: Severity = severity && severities.includes(severity) ? severity : FAIL;\n\n        selectedSeverity === WARN\n            ? this.bumpTestWarning(fieldName, statement)\n            : this.bumpTestError(fieldName, statement);\n\n        return this;\n    }\n\n    /**\n     * Uniquely add a field to the `skipped` list\n     * @param {string} fieldName\n     * @return {Object} Current instance\n     */\n    addToSkipped(fieldName: string): this {\n        !this.skipped.includes(fieldName) && this.skipped.push(fieldName);\n\n        return this;\n    }\n\n    /**\n     * Runs completion callbacks aggregated by `done`\n     * regardless of success or failure\n     */\n    runCompletionCallbacks() {\n        this.completionCallbacks.forEach((cb) => cb(this));\n    }\n\n    /**\n     * Registers callback functions to be run when test suite is done running\n     * If current suite is not async, runs the callback immediately\n     * @param {function} callback the function to be called on done\n     * @return {Object} Current instance\n     */\n    done(callback: Function) {\n        if (typeof callback !== 'function') {return this;}\n\n        if (!this.async) {\n            callback(this);\n        }\n\n        this.completionCallbacks.push(callback);\n        return this;\n    }\n\n    /**\n     * Marks current suite as async to be used by `done`\n     * @return {Object} Current instance\n    */\n    markAsync() {\n        this.async = true;\n        return this;\n    }\n\n    /**\n     * Getall the errors of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {Array | Object} The field's errors, or all errors\n     */\n    getErrors(fieldName: string): Array<string> | ErrorAndWarningObject {\n        if (!fieldName) {\n            return this.validationErrors;\n        }\n\n        if (this.validationErrors[fieldName]) {\n            return this.validationErrors[fieldName];\n        }\n\n        return [];\n    }\n\n    /**\n     * Getall the warnings of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {Array | Object} The field's warnings, or all warnings\n     */\n    getWarnings(fieldName: string): Array<string> | ErrorAndWarningObject {\n        if (!fieldName) {\n            return this.validationWarnings;\n        }\n\n        if (this.validationWarnings[fieldName]) {\n            return this.validationWarnings[fieldName];\n        }\n\n        return [];\n    }\n\n    async: boolean;\n    name: string;\n    hasValidationErrors: boolean;\n    hasValidationWarnings: boolean;\n    failCount: number;\n    warnCount: number;\n    testCount: number;\n    validationErrors: ErrorAndWarningObject;\n    validationWarnings: ErrorAndWarningObject;\n    testsPerformed: {\n        [name: string]: {\n            testCount: number,\n            failCount: number,\n            warnCount: number\n        }\n    };\n    skipped: Array<string>;\n    completionCallbacks: Array<Function>;\n    fail: Function;\n}\n\nexport default ResultObject;","// @flow\n\nexport const INVALID_FORM_NAME: string = '0';\nexport const ENFORCE_FAILED: string = '1';\nexport const EXPECT_TYPE_FAILURE: string = '2';\nexport const MISSING_ARGUMENT_TESTS: string = '3';\nexport const UNEXPECTED_ARGUMENT_SPECIFIC: string = '4';\nexport const VALIDATE_UNEXPECTED_TEST: string = '5';","// @flow\n\nexport const PASSABLE: string = 'Passable';\nexport const ENFORCE: string = 'Enforce';\nexport const VALIDATE: string = 'Validate';","// @flow\nimport { Errors, Modules } from '../../constants';\nconst passableConstructor: string = `${Modules.PASSABLE} constructor`;\n\nfunction errorBuilder(functionName, errorMessage) {\n    return `[${Modules.PASSABLE}]: Failed to execute '${functionName}': ${errorMessage}`;\n}\n\nfunction unexpectedArgs(type, name, position) {\n    return `Unexpected '${type}'. Expected \\`${name}\\` at position ${position}. See documentation for more info.`;\n}\n\nfunction runtimeError(type: string, ...args: Array<string>) {\n    switch (type) {\n        case Errors.INVALID_FORM_NAME:\n            return new TypeError(errorBuilder(passableConstructor, `Unexpected '${args[0]}', expected string.`));\n        case Errors.ENFORCE_FAILED:\n            return new Error(errorBuilder(Modules.ENFORCE, `${args[0]} - invalid ${args[1]} value.`));\n        case Errors.EXPECT_TYPE_FAILURE:\n            const val: string = Array.isArray(args[1]) ? JSON.stringify(args[1]) : args[1];\n            return new TypeError(errorBuilder(args[0], `expected ${val} to be a ${args[2]}.`));\n        case Errors.MISSING_ARGUMENT_TESTS:\n            return new TypeError(errorBuilder(passableConstructor, unexpectedArgs(args[0], 'tests', 1)));\n        case Errors.UNEXPECTED_ARGUMENT_SPECIFIC:\n            return new TypeError(errorBuilder(passableConstructor, unexpectedArgs(args[0], 'specific', 2)));\n        case Errors.VALIDATE_UNEXPECTED_TEST:\n            return new TypeError(errorBuilder(Modules.VALIDATE, `Expected ${args[0]} \\`test\\` to be a function.`));\n        default:\n            return new Error(errorBuilder(Modules.PASSABLE, 'General exception.'));\n    }\n}\n\nexport default runtimeError;","// @flow\nimport { runtimeError } from '../helpers';\nimport { Errors } from '../constants';\n\n/** Class representing validation inclusion and exclusion groups */\nclass Specific {\n    not: SpecificGroup;\n    only: SpecificGroup;\n\n    /**\n     * Initialize Specific object\n     *\n     * @param {String | Array | Object | undefined} specific\n     */\n    constructor(specific: ?SpecificArgs) {\n\n        if (!specific) { return; }\n\n        if (!Specific.is(specific)) {\n            throw runtimeError(Errors.UNEXPECTED_ARGUMENT_SPECIFIC, typeof specific);\n        }\n\n        if (typeof specific === 'string' || Array.isArray(specific)) {\n            if (specific.length === 0) { return; }\n            this.only = this.populateGroup(this.only, specific);\n            return;\n        }\n\n        if (specific.only) {\n            this.only = this.populateGroup(this.only, specific.only);\n        }\n\n        if (specific.not) {\n            this.not = this.populateGroup(this.not, specific.not);\n        }\n    }\n\n    /**\n     * Populate inclusion and exclusion groups\n     *\n     * @param {Object} group - the group to populate.\n     * @param {String | Array} field - the field to add to the group\n     * @return {Object} modified group\n     */\n    populateGroup(group: SpecificGroup, field: SpecificField) {\n        group = group || {};\n\n        if (typeof field === 'string') {\n            group[field] = true;\n        } else if (Array.isArray(field)) {\n            field.forEach((item) => group[item] = true);\n        }\n\n        return group;\n    }\n\n    /**\n     * Checkes whether a given field name is in exclusion group\n     * or not a member of inclusion group (when present)\n     *\n     * @param {String} fieldName\n     * @return {Boolean}\n     */\n    excludes(fieldName: string) {\n        if (this.only && !this.only[fieldName]) {\n            return true;\n        }\n\n        if (this.not && this.not[fieldName]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Test whether a given argument matches\n     * the `specific` filter convention\n     *\n     * @param {Any} item\n     * @return {boolean}\n     */\n    static is(item: AnyValue) {\n        if (Array.isArray(item)) {\n            return item.every((item) => typeof item === 'string');\n        }\n\n        if (typeof item === 'string') { return true; }\n\n        if (item !== null && typeof item === 'object' && (\n            item.hasOwnProperty('only')\n            || item.hasOwnProperty('not')\n        )) {\n            return true;\n        }\n\n        return false;\n    }\n\n}\n\nexport default Specific;","// @flow\n\nimport { testRunner, testRunnerAsync } from './test_runner';\nimport ResultObject from './result_object';\nimport { runtimeError } from './helpers';\nimport Specific from './Specific';\nimport { Errors } from './constants/';\n\n/**\n * Describes a passable validation suite\n */\nclass Passable {\n\n    specific: Specific;\n    res: ResultObject;\n    test: TestProvider;\n    pending: Array<PassableTest>;\n\n    pending = [];\n\n    /**\n     * Initializes a validation suite, creates a new ResultObject instance and runs pending tests\n     */\n    constructor(name: string, tests: TestsWrapper, specific: ?SpecificArgs) {\n\n        if (typeof name !== 'string') {\n            throw runtimeError(Errors.INVALID_FORM_NAME, typeof name);\n        }\n\n        if (typeof tests !== 'function') {\n            throw runtimeError(Errors.MISSING_ARGUMENT_TESTS, typeof tests);\n        }\n\n        this.specific = new Specific(specific);\n\n        this.res = new ResultObject(name);\n\n        tests(this.test);\n        this.runPendingTests();\n    }\n\n    addPendingTest = (test: PassableTest) => this.pending.push(test);\n    clearPendingTest = (test: PassableTest) => {\n\n        // $FlowFixMe\n        this.pending = this.pending.filter((t: PassableTest): boolean => t !== test);\n        if (this.pending.length === 0) {\n            this.res.runCompletionCallbacks();\n        }\n    };\n\n    /**\n     * Test function passed over to the consumer.\n     * It initiates field validation, and adds te test to the pending tests list\n     * @param {string} fieldName the name of the field being validated\n     * @param {string} statement description of the test\n     * @param {function} test the actual test callback or promise\n     */\n    test = (fieldName: string, statement: string, test: PassableTest, severity: Severity) => {\n\n        if (this.specific.excludes(fieldName)) {\n            this.res.addToSkipped(fieldName);\n            return;\n        }\n\n        this.res.initFieldCounters(fieldName);\n\n        if (typeof test !== 'function' && !(test instanceof Promise)) {\n            return;\n        }\n\n        test.fieldName = fieldName;\n        test.statement = statement;\n        test.severity = severity;\n\n        this.addPendingTest(test);\n    }\n\n    /**\n     * Runs all pending tests, clears pending tests list and bumps counters\n     */\n    runPendingTests = () => {\n        [...this.pending].forEach((test) => {\n            if (test instanceof Promise) {\n\n                this.res.markAsync();\n\n                const done: Function = () => {\n                    this.clearPendingTest(test);\n                };\n\n                const fail: Function = () => {\n                    // order is important here! fail needs to be called before `done`.\n                    this.res.fail(test.fieldName, test.statement, test.severity);\n                    done();\n                };\n\n                testRunnerAsync(test, done, fail);\n            } else {\n                const isValid: boolean = testRunner(test);\n\n                if (!isValid) {\n                    this.res.fail(test.fieldName, test.statement, test.severity);\n                }\n                this.clearPendingTest(test);\n            }\n            this.res.bumpTestCounter(test.fieldName);\n        });\n    }\n}\n\nexport default Passable;","// @flow\nfunction testRunner(test: Function): boolean {\n\n    let isValid: null | boolean = null;\n\n    try {\n        const res: testRunnerCallback = test();\n\n        if (typeof res !== 'undefined' && res !== null && res.hasOwnProperty('valid')) {\n            isValid = res.valid;\n        } else if (typeof res === 'boolean') {\n            isValid = res || false;\n        } else {\n            isValid = true;\n        }\n    } catch (e) {\n        isValid = false;\n    }\n\n    return !!isValid;\n}\n\nfunction testRunnerAsync(test: Function, done: Function, fail: Function): void {\n    try {\n        test.then(done, fail);\n    } catch (e) {\n        fail();\n    }\n}\n\nexport { testRunnerAsync, testRunner };","// @flow\n/**\n * A function which returns whether a combination of\n * rule + value is true or false\n *\n * @param {any} value - the value being tested\n * @param {string} key the name of the rule being run\n * @param {Object} tests an object containing the group of tests in the current run\n * @param {Object} rules an object containing all the rules available for the current test\n * @return {boolean} value validation result\n */\n\nexport default function run(value: AnyValue, key: string, tests: CompoundTestObject, rules: EnforceRules): boolean {\n\n    if (typeof rules[key] !== 'function') {\n        if (typeof tests[key] === 'function') {\n            return tests[key](value);\n        }\n\n        return false;\n    }\n\n    const args: mixed = tests[key];\n\n    return rules[key](value, args);\n}","// @flow\nimport allOf from './all_of';\nimport anyOf from './any_of';\nimport noneOf from './none_of';\n\nexport default {\n    allOf,\n    anyOf,\n    noneOf\n};","// @flow\nimport run from '../run';\n\nexport default function allOf(value: mixed, tests: CompoundTestObject, rules: EnforceRules): boolean {\n\n    const validations: Array<string> = Object.keys(tests);\n\n    if (validations.length === 0) {\n        return false;\n    }\n\n    return validations.every((key) => run(value, key, tests, rules) === true);\n}","// @flow\nimport run from '../run';\n\nexport default function anyOf(value: mixed, tests: CompoundTestObject, rules: EnforceRules): boolean {\n\n    const validations: Array<string> = Object.keys(tests);\n    return validations.some((key) => run(value, key, tests, rules) === true);\n}\n","// @flow\nimport run from '../run';\n\nexport default function noneOf(value: mixed, tests: CompoundTestObject, rules: EnforceRules): boolean {\n\n    const validations: Array<string> = Object.keys(tests);\n\n    if (validations.length === 0) {\n        return false;\n    }\n\n    return validations.every((key) => run(value, key, tests, rules) !== true);\n}","// @flow\n\nimport { isType } from '../';\nimport { runtimeError } from '../../../../../helpers/';\nimport { Errors } from '../../../../../constants';\n\nfunction expectType(value: AnyValue, type: string, functionName: string): true | void {\n    if (!isType(value, type)) {\n        throw runtimeError(Errors.EXPECT_TYPE_FAILURE, functionName, value, type);\n    }\n\n    return true;\n}\n\nexport default expectType;\n","// @flow\n\nimport {\n    reduceArrayToMap,\n    findArrayValuesInMapKeys\n} from '../index';\n\ntype Value = Array<NumStrBool>;\n\nfunction findArrayValuesInArray(values: Value, array: Value): boolean {\n    const reducedArray: MapType = reduceArrayToMap(array),\n        allItemsFound: boolean = findArrayValuesInMapKeys(values, reducedArray);\n\n    return allItemsFound;\n}\n\nexport default findArrayValuesInArray;","// @flow\n\nfunction findArrayValuesInMapKeys(array: Array<NumStrBool>, map: MapType): boolean { // eslint-disable-line flowtype/no-weak-types\n    if (!map) {return false;}\n    return array.every((element) => map && map.has(element));\n}\n\nexport default findArrayValuesInMapKeys;","// @flow\nfunction findValInArrayOrString(value: string | AnyValue, container: Array<NumStrBool> | string): boolean {\n    return container.indexOf(value) > -1;\n}\n\nexport default findValInArrayOrString;","// @flow\nfunction getSize(value: AnyValue): number {\n\n    if (!value) {\n        return 0;\n    } else if (typeof value === 'number' && !isNaN(value)) {\n        return value;\n    } else if (value.hasOwnProperty('length')) {\n        return value.length;\n    } else if (typeof value === 'object') {\n        return Object.keys(value).length;\n    } else {\n        return 0;\n    }\n};\n\nexport default getSize;","// @flow\n\n/**\n * Check if value type matches any of provided types\n * Allows checking agains custom type 'array' for array values\n *\n * @example\n * // returns false\n * isType(5, 'string')\n * @example\n * // returns true\n * isType([], 'string', 'array')\n * @param {any} value Value to match\n * @param {...string} types\n * @return {boolean} true if value matches against any type, false otherwise\n */\nfunction isType(value: mixed, ...types: Array<string>): boolean {\n    return types.some((type) => type === 'array' ? Array.isArray(value) : (typeof value === type));\n}\n\nexport default isType;","// @flow\n\nfunction reduceArrayToMap(array: Array<NumStrBool>): MapType {\n    return array.reduce((acc, val) => {\n        acc.set(val, true);\n\t    return acc;\n    }, new Map());\n}\n\nexport default reduceArrayToMap;","// @flow\nimport { isType, expectType } from '../../helpers';\n\nfunction isArray(value: mixed, expect: boolean = true): boolean {\n    expectType(expect, 'boolean', 'isArray');\n    return isType(value, 'array') === expect;\n}\n\nisArray.negativeForm = 'isNotArray';\n\nexport default isArray;","// @flow\n\nimport { isType, expectType } from '../../helpers';\n\nfunction isNumber(value: mixed, expect: boolean = true): boolean {\n    expectType(expect, 'boolean', 'isNumber');\n    return isType(value, 'number') === expect;\n}\n\nisNumber.negativeForm = 'isNotNumber';\n\nexport default isNumber;","// @flow\nimport { isType, expectType } from '../../helpers';\n\nfunction isString(value: mixed, expect: boolean = true): boolean {\n    expectType(expect, 'boolean', 'isString');\n    return isType(value, 'string') === expect;\n}\n\nisString.negativeForm = 'isNotString';\n\nexport default isString;","// @flow\nimport { isType } from '../../helpers';\n\nfunction matches(value: string, regex: RegExp | string): boolean {\n\n    if (regex instanceof RegExp) {\n        return regex.test(value);\n    } else if (isType(regex, 'string')) {\n        return new RegExp(regex).test(value);\n    } else {\n        return false;\n    }\n}\n\nmatches.negativeForm = 'notMatches';\n\nexport default matches;","// @flow\n\nimport {\n    isType,\n    findArrayValuesInArray,\n    findValInArrayOrString\n} from '../../helpers';\n\ntype All = NumStrBool | Array<NumStrBool>;\ntype Value = All | Array<NumStrBool>;\ntype Arg = string | Array<NumStrBool>;\n\nfunction inside(value: Value, arg1: Arg): boolean {\n\n    if (Array.isArray(arg1)) {\n\n        if (isType(value, 'string', 'number', 'boolean')) {\n            return findValInArrayOrString(value, arg1);\n        }\n        if (Array.isArray(value)) {\n            return findArrayValuesInArray(value, arg1);\n        }\n    }\n\n    // both value and arg1 are strings\n    if (isType(arg1, 'string') && isType(value, 'string')) {\n        return findValInArrayOrString(value, arg1);\n    }\n\n    return false;\n}\n\ninside.negativeForm = 'notInside';\n\nexport default inside;","// @flow\n\nimport { expectType } from '../../helpers';\n\nfunction isNumeric(value: mixed, expect: boolean = true): boolean {\n    expectType(expect, 'boolean', 'isNumeric');\n\n    const result: boolean = !isNaN(parseFloat(value)) && isFinite(value);\n    return result === expect;\n}\n\nisNumeric.negativeForm = 'isNotNumeric';\n\nexport default isNumeric;","// @flow\nimport { expectType, getSize } from '../../helpers';\n\nfunction isEmpty(value: mixed, expect: boolean = true): boolean {\n    expectType(expect, 'boolean', 'isEmpty');\n\n    return (getSize(value) === 0) === expect;\n};\n\nisEmpty.negativeForm = 'isNotEmpty';\n\nexport default isEmpty;","// @flow\nimport { getSize } from '../../helpers';\n\nfunction sizeEquals(value: mixed, arg1: number) {\n    return getSize(value) === arg1;\n}\n\nsizeEquals.negativeForm = 'sizeNotEquals';\n\nexport default sizeEquals;","// @flow\n\n/**\n * Collects rules with `negativeForm` attributes.\n * When found, it creates a new function that flips\n * the value of the original rule.\n * @param {Object} rules - enforce rules object\n * @returns {Object} extended rules object\n */\nfunction extendNegativeRules(rules: EnforceRules) {\n\n    for (const rule: string in rules) {\n        const negativeForm: string = rules[rule].negativeForm;\n\n        if (negativeForm) {\n            rules[negativeForm] = (...args) => !rules[rule](...args);\n        }\n    }\n\n    return rules;\n}\n\nexport default extendNegativeRules;\n","// @flow\nimport isArray from './lang/is_array';\nimport isNumber from './lang/is_number';\nimport isString from './lang/is_string';\nimport matches from './content/matches';\nimport inside from './content/inside';\nimport isNumeric from './content/is_numeric';\nimport isEmpty from './size/is_empty';\nimport sizeEquals from './size/size_equals';\nimport largerThan from './size/larger_than';\nimport smallerThan from './size/smaller_than';\nimport smallerThanOrEquals from './size/smaller_than_or_equals';\nimport largerThanOrEquals from './size/larger_than_or_equals';\nimport extendNegativeRules from './helpers/extend_negative_rules';\n\nconst rules: EnforceRules = {\n    isArray,\n    isNumber,\n    isString,\n    matches,\n    inside,\n    isNumeric,\n    isEmpty,\n    largerThan,\n    smallerThan,\n    smallerThanOrEquals,\n    largerThanOrEquals,\n    sizeEquals\n};\n\nexport default extendNegativeRules(rules);","// @flow\nimport { getSize } from '../../helpers';\n\nfunction largerThan(value: mixed, arg1: number): boolean {\n    return getSize(value) > arg1;\n}\n\nexport default largerThan;","// @flow\nimport {getSize} from '../../helpers';\n\nfunction smallerThan(value: mixed, arg1: number) {\n    return getSize(value) < arg1;\n}\n\nexport default smallerThan;","// @flow\nimport {getSize} from '../../helpers';\n\nfunction smallerThanOrEquals(value: mixed, arg1: number) {\n    return getSize(value) <= arg1;\n}\n\nexport default smallerThanOrEquals;","// @flow\nimport {getSize} from '../../helpers';\n\nfunction largerThanOrEquals(value: mixed, arg1: number): boolean {\n    return getSize(value) >= arg1;\n}\n\nexport default largerThanOrEquals;","// @flow\nimport { Errors } from '../../../constants';\nimport { runtimeError } from '../../../helpers';\n\n/**\n * Run group of tests using test runner. (e.g. `anyOf`)\n *\n * @param {Object} allRules\n * @param {Function} runner - test runner\n * @param {Any} value\n * @param {Object} tests\n * @return {object} enforce object\n */\nfunction compound(allRules: EnforceRules, runner: Runner, value: AnyValue, tests: CompoundTestObject): void {\n    if (typeof runner !== 'function') { return; }\n\n    if (runner(value, tests, allRules) !== true) {\n        throw runtimeError(Errors.ENFORCE_FAILED, runner.name, typeof value);\n    }\n}\n\nexport default compound;","// @flow\n\nimport { Errors } from '../../../constants';\nimport { runtimeError } from '../../../helpers';\n\n/**\n * Run a single rule against enforced value (e.g. `isNumber()`)\n *\n * @param {Function} rule - rule to run\n * @param {Any} value\n * @param {Array} args list of arguments sent from consumer\n */\nfunction rule(rule: EnforceRule, value: AnyValue, ...args: RuleArgs): void {\n\n    if (typeof rule !== 'function') { return; }\n\n    if (rule(value, ...args) !== true) {\n        throw runtimeError(Errors.ENFORCE_FAILED, rule.name, typeof value);\n    }\n}\n\nexport default rule;\n","let root;\n\n// credit https://stackoverflow.com/questions/3277182/how-to-get-the-global-object-in-javascript\ntry {\n    root = (() => undefined).constructor('return this')();\n} catch (e) {\n    root = window;\n}\n\nexport default root;","import proxyPolyfill from 'proxy-polyfill/src/proxy.js';\nimport root from './root';\n\nfunction safeProxy(target, handler) {\n\n    if (!root.Proxy) {\n        const ProxyPolyfill = proxyPolyfill();\n        return new ProxyPolyfill(target, handler);\n    }\n\n    return new Proxy(target, handler);\n}\n\nexport default safeProxy;","// @flow\n\nimport * as runnables from './runnables';\nimport * as runners from './runners';\nimport safeProxy from './helpers/safe_proxy';\n\nclass Enforce {\n    enforce: EnforceInstance;\n    rules: EnforceRules;\n    allRunnables: EnforceRules;\n\n    constructor(customRules: EnforceRules = {}) {\n        this.rules = Object.assign({}, runnables.rules, customRules);\n        this.allRunnables = Object.assign({}, runnables.compounds, this.rules);\n\n        return this.enforce;\n    }\n\n    enforce = (value: AnyValue) => {\n        const proxy: EnforceRules = safeProxy(this.allRunnables, {\n            get: (allRunnables, fnName) => {\n\n                if (this.rules.hasOwnProperty(fnName) && typeof this.rules[fnName] === 'function') {\n                    return (...args) => {\n                        runners.rule(this.rules[fnName], value, ...args);\n                        return proxy;\n                    };\n                } else if (runnables.compounds.hasOwnProperty(fnName) && typeof runnables.compounds[fnName] === 'function') {\n                    return (tests) => {\n                        runners.compound(this.rules, runnables.compounds[fnName], value, tests);\n                        return proxy;\n                    };\n                } else {\n                    return allRunnables[fnName];\n                }\n            }\n        });\n        return proxy;\n    }\n}\n\nconst enforce: EnforceInstance = new Enforce({});\n\nexport default Enforce;\n\nexport {\n    enforce\n};\n","// @flow\nimport runtimeError from '../helpers/runtime_error';\nimport { Errors } from '../constants';\n\n/**\n * Run tests and catch errors\n *\n * @param {function} callback The test content\n * @return {boolean}\n */\nfunction validate(test: PassableTest): boolean {\n\n    if (typeof test !== 'function' && !(test instanceof Promise)) {\n        throw runtimeError(Errors.VALIDATE_UNEXPECTED_TEST, typeof test);\n    }\n\n    try {\n        return test() !== false;\n    } catch (_) {\n        return false;\n    }\n}\n\nexport default validate;","// @flow\nimport Passable from './Passable';\nimport Enforce, { enforce } from './Enforce';\nimport validate from './validate';\nimport { WARN, FAIL } from './result_object';\nimport { version } from '../version.json';\n\nfunction passable(name: string, tests: TestsWrapper, specific: ?SpecificArgs) {\n    const suite: Passable = new Passable(name, tests, specific);\n    return suite.res;\n}\n\npassable.VERSION = version;\npassable.enforce = enforce;\npassable.Enforce = Enforce;\npassable.validate = validate;\npassable.WARN = WARN;\npassable.FAIL = FAIL;\n\nexport default passable;"],"sourceRoot":""}