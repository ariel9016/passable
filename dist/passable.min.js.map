{"version":3,"file":"passable.min.js","sources":["../src/core/context/index.js","../src/core/test/index.js","../src/core/passableResult/index.js","../src/constants.js","../src/core/Specific/index.js","../src/core/passable/index.js","../node_modules/n4s/dist/n4s.min.js","../src/index.js","../src/utilities/validate/index.js","../src/utilities/any/index.js"],"sourcesContent":["const Context = function() {}; // eslint-disable-line\n\nContext.prototype.set = function(parent) {\n    this.parent = parent;\n    return this;\n};\n\nconst context = new Context();\n\nexport default context;\n","import ctx from '../context';\n\n/**\n * Runs all async tests, updates output object with result\n * @param {Promise} testPromise the actual test callback or promise\n */\nexport const runAsync = (testPromise) => {\n    const { fieldName, statement, severity, parent } = testPromise;\n\n    parent.result.markAsync(fieldName);\n\n    const done = () => {\n        clearPendingTest(testPromise);\n        if (!hasRemainingPendingTests(parent, fieldName)) {\n            parent.result.markAsDone(fieldName);\n        }\n\n        if (!hasRemainingPendingTests(parent)) {\n            parent.result.markAsDone();\n        }\n    };\n\n    const fail = () => {\n        if (parent.pending.includes(testPromise)) {\n            parent.result.fail(fieldName, statement, severity);\n        }\n\n        done();\n    };\n\n    try {\n        testPromise.then(done, fail);\n    } catch (e) {\n        fail();\n    }\n};\n\n/**\n * Clears pending test from parent context\n * @param {Promise} testPromise the actual test callback or promise\n */\nconst clearPendingTest = (testPromise) => {\n    testPromise.parent.pending = testPromise.parent.pending.filter((t) => t !== testPromise);\n};\n\n/**\n * Checks if there still are remaining pending tests for given criteria\n * @param {Object} parent Parent context\n * @param {String} fieldName name of the field to test against\n * @return {Boolean}\n */\nconst hasRemainingPendingTests = (parent, fieldName) => {\n    if (!parent.pending.length) {\n        return false;\n    }\n\n    if (fieldName) {\n        return parent.pending.some((testPromise) => testPromise.fieldName === fieldName);\n    }\n\n    return !!parent.pending.length;\n};\n\n/**\n * Performs shallow run over test functions, assuming sync tests only. Returning result\n * @param {function | Promise} testFn the actual test callback or promise\n * @return {*} result from test function\n */\nconst preRun = (testFn) => {\n    let result;\n    try {\n        result = testFn();\n    } catch (e) {\n        result = false;\n    }\n    if (result === false) {\n        testFn.parent.result.fail(testFn.fieldName, testFn.statement, testFn.severity);\n    }\n\n    return result;\n};\n\n/**\n * Registers all supplied tests, if async - adds to pending array\n * @param {function | Promise} testFn the actual test callback or promise\n */\nconst register = (testFn) => {\n    const { parent, fieldName } = testFn;\n    let pending = false;\n    let result;\n\n    if (parent.specific.excludes(fieldName)) {\n        parent.result.addToSkipped(fieldName);\n        return;\n    }\n\n    parent.result.initFieldCounters(fieldName);\n    parent.result.bumpTestCounter(fieldName);\n\n    if (testFn && typeof testFn.then === 'function') {\n        pending = true;\n    } else {\n        result = preRun(testFn);\n    }\n\n    if (result && typeof result.then === 'function') {\n        pending = true;\n        testFn = Object.assign(result, testFn);\n    }\n\n    if (pending) {\n        parent.pending.push(testFn);\n    }\n};\n\n/**\n * The function used by the consumer\n * @param {String} fieldName name of the field to test against\n * @param {String} statement the message shown to the user in case of a failure\n * @param {function | Promise} testFn the actual test callback or promise\n * @param {String} Severity indicates whether the test should fail or warn\n */\nconst test = (fieldName, statement, testFn, severity) => {\n    if (!testFn) {\n        return;\n    }\n    if (typeof testFn.then === 'function' || typeof testFn === 'function') {\n        Object.assign(testFn, {\n            fieldName,\n            statement,\n            severity,\n            parent: ctx.parent\n        });\n\n        register(testFn);\n    }\n};\n\nexport default test;\n","import { WARN, FAIL } from '../../constants';\nconst severities = [ WARN, FAIL ];\n\nconst passableResult = (name) => {\n\n    const completionCallbacks = [];\n    let asyncObject = null;\n    let hasValidationErrors = false;\n    let hasValidationWarnings = false;\n    let cancelled = false;\n\n    /**\n     * Initializes specific field's counters\n     * @param {string} fieldName - The name of the field.\n     */\n    const initFieldCounters = (fieldName) => {\n        if (output.testsPerformed[fieldName]) { return output; }\n\n        output.testsPerformed[fieldName] = {\n            testCount: 0,\n            failCount: 0,\n            warnCount: 0\n        };\n    };\n\n    /**\n     * Bumps test counters to indicate tests that's being performed\n     * @param {string} fieldName - The name of the field.\n     */\n    const bumpTestCounter = (fieldName) => {\n        if (!output.testsPerformed[fieldName]) { return output; }\n\n        output.testsPerformed[fieldName].testCount++;\n        output.testCount++;\n    };\n\n    /**\n     * Bumps field's warning counts and adds warning string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    const bumpTestWarning = (fieldName, statement) => {\n        hasValidationWarnings = true;\n        output.warnings[fieldName] = output.warnings[fieldName] || [];\n        output.warnings[fieldName].push(statement);\n        output.warnCount++;\n        output.testsPerformed[fieldName].warnCount++;\n    };\n\n    /**\n     * Bumps field's error counts and adds error string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    const bumpTestError = (fieldName, statement) => {\n        hasValidationErrors = true;\n        output.errors[fieldName] = output.errors[fieldName] || [];\n        output.errors[fieldName].push(statement);\n        output.failCount++;\n        output.testsPerformed[fieldName].failCount++;\n    };\n\n    /**\n     * Fails a field and updates output accordingly\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     * @param {string} severity - Whether it is a `fail` or `warn` test.\n     */\n    const fail = (fieldName, statement, severity) => {\n        if (!output.testsPerformed[fieldName]) { return output; }\n        const selectedSeverity = severity && severities.includes(severity) ? severity : FAIL;\n        selectedSeverity === WARN\n            ? bumpTestWarning(fieldName, statement)\n            : bumpTestError(fieldName, statement);\n    };\n\n    /**\n     * Uniquely add a field to the `skipped` list\n     * @param {string} fieldName - The name of the field.\n     */\n    const addToSkipped = (fieldName) => {\n        !output.skipped.includes(fieldName) && output.skipped.push(fieldName);\n    };\n\n    /**\n     * Runs completion callbacks aggregated by `done`\n     * regardless of success or failure\n     */\n    const runCompletionCallbacks = () => {\n        completionCallbacks.forEach((cb) => !cancelled && cb(output));\n    };\n\n    /**\n     * Marks a field as async\n     * @param {string} fieldName - The name of the field.\n    */\n    const markAsync = (fieldName) => {\n        asyncObject = asyncObject || {};\n        asyncObject[fieldName] = asyncObject[fieldName] || {};\n        asyncObject[fieldName] = {\n            done: false,\n            callbacks: asyncObject[fieldName].callbacks || []\n        };\n    };\n\n    /**\n     * Marks an async field as done\n     * @param {string} fieldName - The name of the field.\n    */\n    const markAsDone = (fieldName) => {\n        if (!fieldName) {\n            return runCompletionCallbacks();\n        }\n\n        if (asyncObject !== null && asyncObject[fieldName]) {\n            asyncObject[fieldName].done = true;\n\n            // run field callbacks set in `after`\n            if (asyncObject[fieldName].callbacks) {\n                asyncObject[fieldName].callbacks.forEach((callback) => !cancelled && callback(output));\n            }\n        }\n    };\n\n    /**\n     * Registers callback functions to be run when test suite is done running\n     * If current suite is not async, runs the callback immediately\n     * @param {function} callback the function to be called on done\n     * @return {object} output object\n     */\n    const done = (callback) => {\n        if (typeof callback !== 'function') {return output;}\n        if (!asyncObject) {\n            callback(output);\n        }\n\n        completionCallbacks.push(callback);\n        return output;\n    };\n\n    /**\n     * Registers callback functions to be run when a certain field is done running\n     * If field is not async, runs the callback immediately\n     * @param {string} fieldName - The name of the field.\n     * @param {function} callback the function to be called on done\n     * @return {object} output object\n     */\n    const after = (fieldName, callback) => {\n        if (typeof callback !== 'function') {\n            return output;\n        }\n\n        asyncObject = asyncObject || {};\n        if (!asyncObject[fieldName] && output.testsPerformed[fieldName]) {\n            callback(output);\n        } else if (asyncObject[fieldName]) {\n            asyncObject[fieldName].callbacks = [...(asyncObject[fieldName].callbacks || []), callback];\n        }\n\n        return output;\n    };\n\n    /**\n     * cancels done/after callbacks. They won't invoke when async operations complete\n     */\n    const cancel = () => {\n        cancelled = true;\n\n        return output;\n    };\n\n    /**\n     * Gets all the errors of a field, or of the whole object\n     * @param {string} fieldName - The name of the field.\n     * @return {array | object} The field's errors, or all errors\n     */\n    const getErrors = (fieldName) => {\n        if (!fieldName) {\n            return output.errors;\n        }\n\n        if (output.errors[fieldName]) {\n            return output.errors[fieldName];\n        }\n\n        return [];\n    };\n\n    /**\n     * Gets all the warnings of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {array | object} The field's warnings, or all warnings\n     */\n    const getWarnings = (fieldName) => {\n        if (!fieldName) {\n            return output.warnings;\n        }\n\n        if (output.warnings[fieldName]) {\n            return output.warnings[fieldName];\n        }\n\n        return [];\n    };\n\n    /**\n     * Checks if a certain field (or the whole suite) has errors\n     * @param {string} [fieldName]\n     * @return {boolean}\n     */\n    const hasErrors = (fieldName) => {\n        if (!fieldName) {\n            return hasValidationErrors;\n        }\n\n        return Boolean(output.getErrors(fieldName).length);\n    };\n\n    /**\n     * Checks if a certain field (or the whole suite) has warnings\n     * @param {string} [fieldName] - The name of the field.\n     * @return {boolean}\n     */\n    const hasWarnings = (fieldName) => {\n        if (!fieldName) {\n            return hasValidationWarnings;\n        }\n\n        return Boolean(output.getWarnings(fieldName).length);\n    };\n\n    const output = {\n        name,\n        failCount: 0,\n        warnCount: 0,\n        testCount: 0,\n        testsPerformed: {},\n        errors: {},\n        warnings: {},\n        skipped: []\n    };\n\n    Object.defineProperties(output, {\n        hasErrors: {\n            value: hasErrors,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        },\n        hasWarnings: {\n            value: hasWarnings,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        },\n        getErrors: {\n            value: getErrors,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        },\n        getWarnings: {\n            value: getWarnings,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        },\n        done: {\n            value: done,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        },\n        after: {\n            value: after,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        },\n        cancel: {\n            value: cancel,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        }\n    });\n\n    return {\n        initFieldCounters,\n        bumpTestError,\n        bumpTestWarning,\n        bumpTestCounter,\n        fail,\n        addToSkipped,\n        runCompletionCallbacks,\n        markAsync,\n        markAsDone,\n        output\n    };\n};\n\nexport default passableResult;","export const WARN = 'warn';\nexport const FAIL = 'fail';\n","/** Class representing validation inclusion and exclusion groups */\nclass Specific {\n\n    /**\n     * Initialize Specific object\n     *\n     * @param {String | Array | Object | undefined} specific\n     */\n    constructor(specific) {\n\n        if (!specific) { return; }\n\n        if (!Specific.is(specific)) {\n            throw new TypeError();\n        }\n\n        if (typeof specific === 'string' || Array.isArray(specific)) {\n            if (specific.length === 0) { return; }\n            this.only = this.populateGroup(this.only, specific);\n            return;\n        }\n\n        if (specific.only) {\n            this.only = this.populateGroup(this.only, specific.only);\n        }\n\n        if (specific.not) {\n            this.not = this.populateGroup(this.not, specific.not);\n        }\n    }\n\n    /**\n     * Populate inclusion and exclusion groups\n     *\n     * @param {Object} group - the group to populate.\n     * @param {String | Array} field - the field to add to the group\n     * @return {Object} modified group\n     */\n    populateGroup(group, field) {\n        group = group || {};\n\n        if (typeof field === 'string') {\n            group[field] = true;\n        } else if (Array.isArray(field)) {\n            field.forEach((item) => group[item] = true);\n        }\n\n        return group;\n    }\n\n    /**\n     * Checkes whether a given field name is in exclusion group\n     * or not a member of inclusion group (when present)\n     *\n     * @param {String} fieldName\n     * @return {Boolean}\n     */\n    excludes(fieldName) {\n        if (this.only && !this.only[fieldName]) {\n            return true;\n        }\n\n        if (this.not && this.not[fieldName]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Test whether a given argument matches\n     * the `specific` filter convention\n     *\n     * @param {Any} item\n     * @return {boolean}\n     */\n    static is(item) {\n        if (Array.isArray(item)) {\n            return item.every((item) => typeof item === 'string');\n        }\n\n        if (typeof item === 'string') { return true; }\n\n        if (item !== null && typeof item === 'object' && (\n            item.hasOwnProperty('only')\n            || item.hasOwnProperty('not')\n        )) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport default Specific;","import ctx from '../context';\nimport test, { runAsync } from '../test';\nimport passableResult from '../passableResult';\nimport Specific from '../Specific';\n\nconst initError = (name, value, doc) => `[Passable]: failed during suite initialization. Unexpected '${typeof value}' for '${name}' argument.\n    See: ${doc ? doc : 'https://fiverr.github.io/passable/getting_started/writing_tests.html'}`;\n\nconst passable = (name, tests, specific) => {\n\n    if (typeof name !== 'string') {\n        throw new TypeError(initError('suite name', name));\n    }\n\n    if (typeof tests !== 'function') {\n        throw new TypeError(initError('tests', tests));\n    }\n\n    if (specific && !Specific.is(specific)) {\n        throw new TypeError(initError('specific', tests, 'https://fiverr.github.io/passable/test/specific.html'));\n    }\n\n    const result = passableResult(name);\n\n    const pending = [];\n\n    const parent = {\n        specific: new Specific(specific),\n        result,\n        pending\n    };\n\n    ctx.set(parent);\n\n    tests(test, result.output);\n    ctx.set(null);\n\n    [...pending].forEach(runAsync);\n\n    return result.output;\n};\n\nexport default passable;\n","!function(n,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(n=n||self).enforce=e()}(this,function(){\"use strict\";function n(e){return(n=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&\"function\"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?\"symbol\":typeof n})(e)}function e(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function t(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,r)}return t}function r(n){return Boolean(Array.isArray(n))}function o(n){return Boolean(\"number\"==typeof n)}function u(n){return Boolean(\"string\"==typeof n)}function i(n,e){return e instanceof RegExp?e.test(n):\"string\"==typeof e&&new RegExp(e).test(n)}function a(e,t){return Array.isArray(t)&&[\"string\",\"number\",\"boolean\"].includes(n(e))?t.includes(e):\"string\"==typeof t&&\"string\"==typeof e&&t.includes(e)}function c(n,e){return n===e}function f(n){var e=!isNaN(parseFloat(n))&&!isNaN(Number(n))&&isFinite(n);return Boolean(e)}function s(n,e){return f(n)&&f(e)&&Number(n)===Number(e)}function l(e){return!e||(f(e)?0===e:Object.prototype.hasOwnProperty.call(e,\"length\")?0===e.length:\"object\"!==n(e)||0===Object.keys(e).length)}function y(n,e){return f(n)&&f(e)&&Number(n)>Number(e)}function p(n,e){return f(n)&&f(e)&&Number(n)>=Number(e)}function g(n,e){return f(n)&&f(e)&&Number(n)<Number(e)}function b(n,e){return f(n)&&f(e)&&Number(n)<=Number(e)}function m(n,e){return n.length===e}r.negativeForm=\"isNotArray\",o.negativeForm=\"isNotNumber\",u.negativeForm=\"isNotString\",i.negativeForm=\"notMatches\",a.negativeForm=\"notInside\",c.negativeForm=\"notEquals\",f.negativeForm=\"isNotNumeric\",s.negativeForm=\"numberNotEquals\",l.negativeForm=\"isNotEmpty\",y.alias=\"gt\",p.alias=\"gte\",g.alias=\"lt\",b.alias=\"lte\",m.negativeForm=\"lengthNotEquals\";var v=function(n){var e=function(e){var t=n[e].negativeForm,r=n[e].alias;t&&(n[t]=function(){return!n[e].apply(n,arguments)}),r&&(n[r]=n[e])};for(var t in n)e(t);return n}({isArray:r,isNumber:o,isString:u,matches:i,inside:a,equals:c,numberEquals:s,isNumeric:f,isEmpty:l,greaterThan:y,greaterThanOrEquals:p,lessThan:g,lessThanOrEquals:b,longerThan:function(n,e){return n.length>e},longerThanOrEquals:function(n,e){return n.length>=e},shorterThan:function(n,e){return n.length<e},shorterThanOrEquals:function(n,e){return n.length<=e},lengthEquals:m,isOdd:function(n){return!!f(n)&&n%2!=0},isEven:function(n){return!!f(n)&&n%2==0}});function h(e,t){if(\"function\"==typeof e){for(var r=arguments.length,o=new Array(r>2?r-2:0),u=2;u<r;u++)o[u-2]=arguments[u];if(!0!==e.apply(void 0,[t].concat(o)))throw new Error(\"[Enforce]: invalid \".concat(n(t),\" value\"))}}var O=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)&&\"function\"==typeof n[e]};function N(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=function(n){for(var r=1;r<arguments.length;r++){var o=null!=arguments[r]?arguments[r]:{};r%2?t(o,!0).forEach(function(t){e(n,t,o[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):t(o).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))})}return n}({},v,{},n);return\"function\"==typeof Proxy?function(n){var e=new Proxy(r,{get:function(t,r){if(O(t,r))return function(){for(var o=arguments.length,u=new Array(o),i=0;i<o;i++)u[i]=arguments[i];return h.apply(void 0,[t[r],n].concat(u)),e}}});return e}:function(n){return Object.keys(r).reduce(function(e,t){return O(r,t)?(e[t]=function(){for(var o=arguments.length,u=new Array(o),i=0;i<o;i++)u[i]=arguments[i];return h.apply(void 0,[r[t],n].concat(u)),e},e):e},{})}}var d=new N;return d.Enforce=N,d});\n","import passable from './core/passable';\nimport test from './core/test';\nimport validate from './utilities/validate';\nimport any from './utilities/any';\nimport { WARN, FAIL } from './constants';\nimport enforce from 'n4s';\n\npassable.VERSION = PASSABLE_VERSION;\npassable.enforce = enforce;\npassable.Enforce = enforce.Enforce;\npassable.test = test;\npassable.validate = validate;\npassable.any = any;\npassable.WARN = WARN;\npassable.FAIL = FAIL;\n\nexport default passable;\n","/**\n * Run tests and catch errors\n *\n * @param {function} callback The test content\n * @return {boolean}\n */\nfunction validate(test) {\n\n    if (typeof test !== 'function' && !(test instanceof Promise)) {\n        throw new TypeError(`[Validate]: expected ${typeof test} to be a function.`);\n    }\n\n    try {\n        return test() !== false;\n    } catch (_) {\n        return false;\n    }\n}\n\nexport default validate;\n","/**\n * Runs given functions and returns true if any of them passes\n * @param  {[]Function} args array of assertion functions\n * @return {Function} A function which, when called, invokes all arguments\n */\nconst any = (...args) => () => args.some((fn) => {\n    try {\n        return fn() !== false;\n    } catch (err) {\n        return false;\n    }\n});\n\nexport default any;\n"],"names":["Context","prototype","set","parent","this","context","runAsync","testPromise","fieldName","statement","severity","result","markAsync","done","clearPendingTest","hasRemainingPendingTests","markAsDone","fail","pending","includes","then","e","filter","t","length","some","test","testFn","ctx","specific","excludes","addToSkipped","initFieldCounters","bumpTestCounter","preRun","_extends","push","register","severities","Specific","is","TypeError","Array","isArray","only","populateGroup","not","item","every","_typeof","hasOwnProperty","group","field","forEach","initError","name","value","doc","passable","tests","completionCallbacks","asyncObject","hasValidationErrors","hasValidationWarnings","cancelled","bumpTestWarning","output","warnings","warnCount","testsPerformed","bumpTestError","errors","failCount","runCompletionCallbacks","cb","testCount","skipped","Object","defineProperties","hasErrors","Boolean","getErrors","writable","configurable","enumerable","hasWarnings","getWarnings","callback","after","callbacks","cancel","passableResult","module","n","Symbol","iterator","constructor","defineProperty","keys","getOwnPropertySymbols","r","getOwnPropertyDescriptor","apply","o","u","i","RegExp","a","c","f","isNaN","parseFloat","Number","isFinite","s","l","call","y","p","g","b","m","negativeForm","alias","v","arguments","isNumber","isString","matches","inside","equals","numberEquals","isNumeric","isEmpty","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals","longerThan","longerThanOrEquals","shorterThan","shorterThanOrEquals","lengthEquals","isOdd","isEven","h","concat","Error","O","N","getOwnPropertyDescriptors","Proxy","get","reduce","d","Enforce","VERSION","PASSABLE_VERSION","enforce","validate","Promise","_","any","args","fn","err","WARN","FAIL"],"mappings":"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"}