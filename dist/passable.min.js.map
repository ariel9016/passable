{"version":3,"sources":["webpack://passable/webpack/universalModuleDefinition","webpack://passable/webpack/bootstrap","webpack://passable/./src/core/passableResult/index.js","webpack://passable/./src/constants.js","webpack://passable/./src/core/Specific/index.js","webpack://passable/./src/core/Passable/index.js","webpack://passable/./src/core/testRunner/index.js","webpack://passable/./src/Enforce/runnables/helpers/is_type/index.js","webpack://passable/./src/Enforce/runnables/rules/lang/is_array/index.js","webpack://passable/./src/Enforce/runnables/rules/lang/is_number/index.js","webpack://passable/./src/Enforce/runnables/rules/lang/is_string/index.js","webpack://passable/./src/Enforce/runnables/rules/content/matches/index.js","webpack://passable/./src/Enforce/runnables/helpers/find_val_in_array_or_string/index.js","webpack://passable/./src/Enforce/runnables/rules/content/inside/index.js","webpack://passable/./src/Enforce/runnables/rules/content/is_numeric/index.js","webpack://passable/./src/Enforce/runnables/helpers/get_size/index.js","webpack://passable/./src/Enforce/runnables/rules/size/is_empty/index.js","webpack://passable/./src/Enforce/runnables/rules/size/greater_than/index.js","webpack://passable/./src/Enforce/runnables/rules/size/greater_than_or_equals/index.js","webpack://passable/./src/Enforce/runnables/rules/size/less_than/index.js","webpack://passable/./src/Enforce/runnables/rules/size/less_than_or_equals/index.js","webpack://passable/./src/Enforce/runnables/rules/size/longer_than/index.js","webpack://passable/./src/Enforce/runnables/rules/size/longer_than_or_equals/index.js","webpack://passable/./src/Enforce/runnables/rules/size/shorter_than/index.js","webpack://passable/./src/Enforce/runnables/rules/size/shorter_than_or_equals/index.js","webpack://passable/./src/Enforce/runnables/rules/size/length_equals/index.js","webpack://passable/./src/Enforce/runnables/helpers/extend_rules/index.js","webpack://passable/./src/Enforce/runnables/rules/index.js","webpack://passable/./src/Enforce/runners/rule/index.js","webpack://passable/./src/Enforce/index.js","webpack://passable/./src/validate/index.js","webpack://passable/./src/index.js"],"names":["root","factory","exports","module","define","amd","Function","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","severities","passableResult","completionCallbacks","asyncObject","bumpTestWarning","fieldName","statement","output","hasValidationWarnings","validationWarnings","push","warnCount","testsPerformed","bumpTestError","hasValidationErrors","validationErrors","failCount","testCount","skipped","hasErrors","Boolean","getErrors","length","hasWarnings","getWarnings","done","callback","after","callbacks","concat","_toConsumableArray","initFieldCounters","bumpTestCounter","fail","severity","includes","addToSkipped","runCompletionCallbacks","forEach","cb","markAsync","markAsDone","Specific","specific","_classCallCheck","this","is","TypeError","Array","isArray","only","populateGroup","not","item","every","_typeof","group","field","constructorError","doc","Passable_typeof","Passable","tests","_this","Passable_classCallCheck","_defineProperty","test","pending","filter","res","some","excludes","operation","runTest","Promise","addPendingTest","assign","clearPendingTest","hasRemainingPendingTests","then","e","testRunnerAsync","isValid","valid","testRunner","Passable_toConsumableArray","runPendingTests","isType","_len","arguments","types","_key","type","is_type_typeof","negativeForm","isNumber","isString","matches","regex","RegExp","findValInArrayOrString","container","indexOf","inside","arg1","isNumeric","result","isNaN","parseFloat","Number","isFinite","getSize","get_size_typeof","keys","isEmpty","greaterThan","alias","greaterThanOrEquals","lessThan","lessThanOrEquals","longerThan","longerThanOrEquals","shorterThan","shorterThanOrEquals","lengthEquals","extendRules","rules","_loop","rule","apply","args","Error","rule_typeof","isRule","rulesObject","Enforce","customRules","undefined","Proxy","proxy","fnName","ruleRunner","reduce","allRules","_len2","_key2","validate","validate_typeof","_","passable","VERSION","PASSABLE_VERSION","enforce","WARN","FAIL"],"mappings":"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","file":"passable.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"passable\"] = factory();\n\telse\n\t\troot[\"passable\"] = factory();\n})(Function('return this')(), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// @flow\n\nimport { WARN, FAIL } from '../../constants';\nconst severities: string[] = [ WARN, FAIL ];\n\ntype AsyncObject = null | {\n    [fieldName: string]: {\n        done: boolean,\n        callbacks: Function[]\n    }\n};\n\nconst passableResult: Function = (name: string): PassableResult => {\n\n    const completionCallbacks: Function[] = [];\n    let asyncObject: AsyncObject = null;\n\n    /**\n     * Initializes specific field's counters\n     * @param {string} fieldName - The name of the field.\n     */\n    const initFieldCounters: Function = (fieldName: string) => {\n        if (output.testsPerformed[fieldName]) { return output; }\n\n        output.testsPerformed[fieldName] = {\n            testCount: 0,\n            failCount: 0,\n            warnCount: 0\n        };\n    };\n\n    /**\n     * Bumps test counters to indicate tests that's being performed\n     * @param {string} fieldName - The name of the field.\n     */\n    const bumpTestCounter: Function = (fieldName: string) => {\n        if (!output.testsPerformed[fieldName]) { return output; }\n\n        output.testsPerformed[fieldName].testCount++;\n        output.testCount++;\n    };\n\n    /**\n     * Bumps field's warning counts and adds warning string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    const bumpTestWarning: Function = (fieldName: string, statement: string) => {\n        output.hasValidationWarnings = true;\n        output.validationWarnings[fieldName] = output.validationWarnings[fieldName] || [];\n        output.validationWarnings[fieldName].push(statement);\n        output.warnCount++;\n        output.testsPerformed[fieldName].warnCount++;\n    };\n\n    /**\n     * Bumps field's error counts and adds error string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    const bumpTestError: Function = (fieldName: string, statement: string) => {\n        output.hasValidationErrors = true;\n        output.validationErrors[fieldName] = output.validationErrors[fieldName] || [];\n        output.validationErrors[fieldName].push(statement);\n        output.failCount++;\n        output.testsPerformed[fieldName].failCount++;\n    };\n\n    /**\n     * Fails a field and updates output accordingly\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     * @param {string} severity - Whether it is a `fail` or `warn` test.\n     */\n    const fail: Function = (fieldName: string, statement: string, severity: Severity) => {\n        if (!output.testsPerformed[fieldName]) { return output; }\n\n        const selectedSeverity: Severity = severity && severities.includes(severity) ? severity : FAIL;\n\n        selectedSeverity === WARN\n            ? bumpTestWarning(fieldName, statement)\n            : bumpTestError(fieldName, statement);\n    };\n\n    /**\n     * Uniquely add a field to the `skipped` list\n     * @param {string} fieldName\n     */\n    const addToSkipped: Function = (fieldName: string) => {\n        !output.skipped.includes(fieldName) && output.skipped.push(fieldName);\n    };\n\n    /**\n     * Runs completion callbacks aggregated by `done`\n     * regardless of success or failure\n     */\n    const runCompletionCallbacks: Function = () => {\n        completionCallbacks.forEach((cb) => cb(output));\n    };\n\n    /**\n     * Marks a field as async\n     * @param {string} fieldName the name of the field marked as async\n    */\n    const markAsync: Function = (fieldName: string) => {\n        asyncObject = asyncObject || {};\n        asyncObject[fieldName] = asyncObject[fieldName] || {};\n        asyncObject[fieldName] = {\n            done: false,\n            callbacks: asyncObject[fieldName].callbacks || []\n        };\n    };\n\n    /**\n     * Marks an async field as done\n     * @param {string} fieldName the name of the field marked as done\n    */\n    const markAsDone: Function = (fieldName: string) => {\n        if (asyncObject !== null && asyncObject[fieldName]) {\n            asyncObject[fieldName].done = true;\n\n            // run field callbacks set in `after`\n            if (asyncObject[fieldName].callbacks) {\n                asyncObject[fieldName].callbacks.forEach((callback) => callback(output));\n            }\n        }\n    };\n\n    /**\n     * Registers callback functions to be run when test suite is done running\n     * If current suite is not async, runs the callback immediately\n     * @param {function} callback the function to be called on done\n     * @return {object} output object\n     */\n    const done: Function = (callback: Function) => {\n        if (typeof callback !== 'function') {return output;}\n\n        if (!asyncObject) {\n            callback(output);\n        }\n\n        completionCallbacks.push(callback);\n        return output;\n    };\n\n    /**\n     * Registers callback functions to be run when a certain field is done running\n     * If field is not async, runs the callback immediately\n     * @param {function} callback the function to be called on done\n     * @return {object} output object\n     */\n    const after: Function = (fieldName: string, callback) => {\n\n        if (typeof callback !== 'function') {\n            return output;\n        }\n\n        asyncObject = asyncObject || {};\n        if (!asyncObject[fieldName] && output.testsPerformed[fieldName]) {\n            callback(output);\n        } else if (asyncObject[fieldName]) {\n            asyncObject[fieldName].callbacks = [...(asyncObject[fieldName].callbacks || []), callback];\n        }\n\n        return output;\n    };\n\n    /**\n     * Gets all the errors of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {Array | Object} The field's errors, or all errors\n     */\n    const getErrors: Function = (fieldName: string) => {\n        if (!fieldName) {\n            return output.validationErrors;\n        }\n\n        if (output.validationErrors[fieldName]) {\n            return output.validationErrors[fieldName];\n        }\n\n        return [];\n    };\n\n    /**\n     * Gets all the warnings of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {Array | Object} The field's warnings, or all warnings\n     */\n    const getWarnings: Function = (fieldName: string) => {\n        if (!fieldName) {\n            return output.validationWarnings;\n        }\n\n        if (output.validationWarnings[fieldName]) {\n            return output.validationWarnings[fieldName];\n        }\n\n        return [];\n    };\n\n    /**\n     * Checks if a certain field (or the whole suite) has errors\n     * @param {string} [fieldName]\n     * @return {boolean}\n     */\n    const hasErrors: Function = (fieldName: string) => {\n        if (!fieldName) {\n            return output.hasValidationErrors;\n        }\n\n        return Boolean(output.getErrors(fieldName).length);\n    };\n\n    /**\n     * Checks if a certain field (or the whole suite) has warnings\n     * @param {string} [fieldName]\n     * @return {boolean}\n     */\n    const hasWarnings: Function = (fieldName: string) => {\n        if (!fieldName) {\n            return output.hasValidationWarnings;\n        }\n\n        return Boolean(output.getWarnings(fieldName).length);\n    };\n\n    const output: PassableOutput = {\n        name,\n        hasValidationErrors: false,\n        hasValidationWarnings: false,\n        failCount: 0,\n        warnCount: 0,\n        testCount: 0,\n        testsPerformed: {},\n        validationErrors: {},\n        validationWarnings: {},\n        skipped: [],\n        hasErrors,\n        hasWarnings,\n        getErrors,\n        getWarnings,\n        done,\n        after\n    };\n\n    return {\n        initFieldCounters,\n        bumpTestError,\n        bumpTestWarning,\n        bumpTestCounter,\n        fail,\n        addToSkipped,\n        runCompletionCallbacks,\n        markAsync,\n        markAsDone,\n        output\n    };\n};\n\nexport default passableResult;","// @flow\n\nexport const WARN: Severity = 'warn';\nexport const FAIL: Severity = 'fail';","// @flow\n\n/** Class representing validation inclusion and exclusion groups */\nclass Specific {\n    not: SpecificGroup;\n    only: SpecificGroup;\n\n    /**\n     * Initialize Specific object\n     *\n     * @param {String | Array | Object | undefined} specific\n     */\n    constructor(specific: ?SpecificArgs) {\n\n        if (!specific) { return; }\n\n        if (!Specific.is(specific)) {\n            throw new TypeError();\n        }\n\n        if (typeof specific === 'string' || Array.isArray(specific)) {\n            if (specific.length === 0) { return; }\n            this.only = this.populateGroup(this.only, specific);\n            return;\n        }\n\n        if (specific.only) {\n            this.only = this.populateGroup(this.only, specific.only);\n        }\n\n        if (specific.not) {\n            this.not = this.populateGroup(this.not, specific.not);\n        }\n    }\n\n    /**\n     * Populate inclusion and exclusion groups\n     *\n     * @param {Object} group - the group to populate.\n     * @param {String | Array} field - the field to add to the group\n     * @return {Object} modified group\n     */\n    populateGroup(group: SpecificGroup, field: SpecificField) {\n        group = group || {};\n\n        if (typeof field === 'string') {\n            group[field] = true;\n        } else if (Array.isArray(field)) {\n            field.forEach((item) => group[item] = true);\n        }\n\n        return group;\n    }\n\n    /**\n     * Checkes whether a given field name is in exclusion group\n     * or not a member of inclusion group (when present)\n     *\n     * @param {String} fieldName\n     * @return {Boolean}\n     */\n    excludes(fieldName: string) {\n        if (this.only && !this.only[fieldName]) {\n            return true;\n        }\n\n        if (this.not && this.not[fieldName]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Test whether a given argument matches\n     * the `specific` filter convention\n     *\n     * @param {Any} item\n     * @return {boolean}\n     */\n    static is(item: AnyValue) {\n        if (Array.isArray(item)) {\n            return item.every((item) => typeof item === 'string');\n        }\n\n        if (typeof item === 'string') { return true; }\n\n        if (item !== null && typeof item === 'object' && (\n            item.hasOwnProperty('only')\n            || item.hasOwnProperty('not')\n        )) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport default Specific;","// @flow\n\nimport { testRunner, testRunnerAsync } from '../testRunner';\nimport passableResult from '../passableResult';\nimport Specific from '../Specific';\n\nconst constructorError: Function = (name: string, value: string, doc?: string): string => `[Passable]: failed during suite initialization. Unexpected '${typeof value}' for '${name}' argument.\n    See: ${doc ? doc : 'https://fiverr.github.io/passable/getting_started/writing_tests.html'}`;\n\n/**\n * Describes a passable validation suite\n */\nclass Passable {\n    specific: Specific;\n    res: PassableResult;\n    test: TestProvider;\n    pending: Array<PassableTest>;\n\n    pending = [];\n\n    /**\n     * Initializes a validation suite, creates a new passableResult instance and runs pending tests\n     */\n    constructor(name: string, tests: TestsWrapper, specific: ?SpecificArgs) {\n\n        if (typeof name !== 'string') {\n            throw new TypeError(constructorError('suite name', name));\n        }\n\n        if (typeof tests !== 'function') {\n            throw new TypeError(constructorError('tests', tests));\n        }\n\n        if (specific && !Specific.is(specific)) {\n            throw new TypeError(constructorError('specific', tests, 'https://fiverr.github.io/passable/test/specific.html'));\n        }\n\n        this.specific = new Specific(specific);\n\n        this.res = passableResult(name);\n\n        tests(this.test, this.res.output);\n        this.runPendingTests();\n    }\n\n    addPendingTest = (test: PassableTest) => this.pending.push(test);\n\n    clearPendingTest = (test: PassableTest) => {\n        this.pending = (this.pending.filter((t: PassableTest): boolean => t !== test): Array<PassableTest>);\n        if (this.pending.length === 0) {\n            this.res.runCompletionCallbacks();\n        }\n    };\n\n    /**\n     * Checks if a given field name still has pending tests\n     * @param {String} fieldName name of the field to test against\n     * @return {Boolean}\n     */\n    hasRemainingPendingTests = (fieldName: string) => this.pending.some((test) => test.fieldName === fieldName);\n\n    /**\n     * Test function passed over to the consumer.\n     * It initiates field validation, and adds te test to the pending tests list\n     * @param {string} fieldName the name of the field being validated\n     * @param {string} statement description of the test\n     * @param {function | Promise} test the actual test callback or promise\n     */\n    test = (fieldName: string, statement: string, test: PassableTest, severity: Severity) => {\n\n        if (this.specific.excludes(fieldName)) {\n            this.res.addToSkipped(fieldName);\n            return;\n        }\n\n        this.res.initFieldCounters(fieldName);\n\n        let operation: Function;\n\n        if (typeof test === 'function') {\n            operation = this.runTest;\n        } else if (test instanceof Promise) {\n            operation = this.addPendingTest;\n        } else {\n            return;\n        }\n\n        operation(Object.assign(test, {\n            fieldName,\n            statement,\n            severity\n        }));\n    }\n\n    /**\n     * calls `runTest` on all pending tests, clears pending tests list and bumps counters\n     * @param {function | Promise} test the actual test callback or promise\n     */\n    runTest = (test: PassableTest) => {\n        if (test instanceof Promise) {\n\n            this.res.markAsync(test.fieldName);\n\n            const done: Function = () => {\n                this.clearPendingTest(test);\n                if (!this.hasRemainingPendingTests(test.fieldName)) {\n                    this.res.markAsDone(test.fieldName);\n                }\n            };\n\n            const fail: Function = () => {\n                // order is important here! fail needs to be called before `done`.\n                this.res.fail(test.fieldName, test.statement, test.severity);\n                done();\n            };\n\n            testRunnerAsync(test, done, fail);\n        } else {\n            const isValid: boolean = testRunner(test);\n\n            if (!isValid) {\n                this.res.fail(test.fieldName, test.statement, test.severity);\n            }\n            this.clearPendingTest(test);\n        }\n        this.res.bumpTestCounter(test.fieldName);\n    }\n\n    /**\n     * calls `runTest` on all pending tests, clears pending tests list and bumps counters\n     */\n    runPendingTests = () => {\n        [...this.pending].forEach(this.runTest);\n    }\n}\n\nexport default Passable;","// @flow\nfunction testRunner(test: Function): boolean {\n\n    let isValid: null | boolean = null;\n\n    try {\n        const res: testRunnerCallback = test();\n\n        if (typeof res !== 'undefined' && res !== null && res.hasOwnProperty('valid')) {\n            isValid = res.valid;\n        } else if (typeof res === 'boolean') {\n            isValid = res || false;\n        } else {\n            isValid = true;\n        }\n    } catch (e) {\n        isValid = false;\n    }\n\n    return !!isValid;\n}\n\nfunction testRunnerAsync(test: Function, done: Function, fail: Function): void {\n    try {\n        test.then(done, fail);\n    } catch (e) {\n        fail();\n    }\n}\n\nexport { testRunnerAsync, testRunner };","// @flow\n\n/**\n * Check if value type matches any of provided types\n * Allows checking agains custom type 'array' for array values\n *\n * @example\n * // returns false\n * isType(5, 'string')\n * @example\n * // returns true\n * isType([], 'string', 'array')\n * @param {any} value Value to match\n * @param {...string} types\n * @return {boolean} true if value matches against any type, false otherwise\n */\nfunction isType(value: mixed, ...types: Array<string>): boolean {\n    return types.some((type) => type === 'array' ? Array.isArray(value) : (typeof value === type));\n}\n\nexport default isType;","// @flow\nimport isType from '../../../helpers/is_type';\n\nfunction isArray(value: mixed): boolean {\n    return Boolean(isType(value, 'array'));\n}\n\nisArray.negativeForm = 'isNotArray';\n\nexport default isArray;","// @flow\n\nimport isType from '../../../helpers/is_type';\n\nfunction isNumber(value: mixed): boolean {\n    return Boolean(isType(value, 'number'));\n}\n\nisNumber.negativeForm = 'isNotNumber';\n\nexport default isNumber;","// @flow\n\nimport isType from '../../../helpers/is_type';\n\nfunction isString(value: mixed): boolean {\n    return Boolean(isType(value, 'string'));\n}\n\nisString.negativeForm = 'isNotString';\n\nexport default isString;","// @flow\nimport isType from '../../../helpers/is_type';\n\nfunction matches(value: string, regex: RegExp | string): boolean {\n\n    if (regex instanceof RegExp) {\n        return regex.test(value);\n    } else if (isType(regex, 'string')) {\n        return new RegExp(regex).test(value);\n    } else {\n        return false;\n    }\n}\n\nmatches.negativeForm = 'notMatches';\n\nexport default matches;","// @flow\nfunction findValInArrayOrString(value: string | AnyValue, container: Array<NumStrBool> | string): boolean {\n    return container.indexOf(value) > -1;\n}\n\nexport default findValInArrayOrString;","// @flow\n\nimport isType from '../../../helpers/is_type';\nimport findValInArrayOrString from '../../../helpers/find_val_in_array_or_string';\n\ntype All = NumStrBool | Array<NumStrBool>;\ntype Value = All | Array<NumStrBool>;\ntype Arg = string | Array<NumStrBool>;\n\nfunction inside(value: Value, arg1: Arg): boolean {\n\n    if (Array.isArray(arg1)) {\n\n        if (isType(value, 'string', 'number', 'boolean')) {\n            return findValInArrayOrString(value, arg1);\n        }\n    }\n\n    // both value and arg1 are strings\n    if (isType(arg1, 'string') && isType(value, 'string')) {\n        return findValInArrayOrString(value, arg1);\n    }\n\n    return false;\n}\n\ninside.negativeForm = 'notInside';\n\nexport default inside;","// @flow\n\nfunction isNumeric(value: mixed): boolean {\n    const result: boolean = !isNaN(parseFloat(value)) && !isNaN(Number(value)) && isFinite(value);\n    return Boolean(result);\n}\n\nisNumeric.negativeForm = 'isNotNumeric';\n\nexport default isNumeric;","// @flow\n\nimport isNumeric from '../../rules/content/is_numeric/';\n\nfunction getSize(value: AnyValue): number {\n\n    if (!value) {\n        return 0;\n    } else if (isNumeric(value)) {\n        return value;\n    } else if (value.hasOwnProperty('length')) {\n        return value.length;\n    } else if (typeof value === 'object') {\n        return Object.keys(value).length;\n    } else {\n        return 0;\n    }\n};\n\nexport default getSize;","// @flow\nimport getSize from '../../../helpers/get_size';\n\nfunction isEmpty(value: mixed): boolean {\n    return Boolean(getSize(value) === 0);\n};\n\nisEmpty.negativeForm = 'isNotEmpty';\n\nexport default isEmpty;","// @flow\nimport isNumeric from '../../content/is_numeric';\n\nfunction greaterThan(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) > Number(arg1);\n}\n\ngreaterThan.alias = 'gt';\n\nexport default greaterThan;","// @flow\nimport isNumeric from '../../content/is_numeric';\n\nfunction greaterThanOrEquals(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) >= Number(arg1);\n}\n\ngreaterThanOrEquals.alias = 'gte';\n\nexport default greaterThanOrEquals;","// @flow\nimport isNumeric from '../../content/is_numeric';\n\nfunction lessThan(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) < Number(arg1);\n}\n\nlessThan.alias = 'lt';\n\nexport default lessThan;","// @flow\nimport isNumeric from '../../content/is_numeric';\n\nfunction lessThanOrEquals(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) <= Number(arg1);\n}\n\nlessThanOrEquals.alias = 'lte';\n\nexport default lessThanOrEquals;","// @flow\n\nfunction longerThan(value: StringOrArray, arg1: number): boolean {\n    return value.length > arg1;\n}\n\nexport default longerThan;\n","// @flow\n\nfunction longerThanOrEquals(value: StringOrArray, arg1: number): boolean {\n    return value.length >= arg1;\n}\n\nexport default longerThanOrEquals;\n","// @flow\n\nfunction shorterThan(value: StringOrArray, arg1: number): boolean {\n    return value.length < arg1;\n}\n\nexport default shorterThan;\n","// @flow\n\nfunction shorterThanOrEquals(value: StringOrArray, arg1: number): boolean {\n    return value.length <= arg1;\n}\n\nexport default shorterThanOrEquals;\n","// @flow\n\nfunction lengthEquals(value: StringOrArray, arg1: number): boolean {\n    return value.length === arg1;\n}\n\nlengthEquals.negativeForm = 'lengthNotEquals';\n\nexport default lengthEquals;\n","// @flow\n\n/**\n * Collects rules with `negativeForm` or `alias` attributes.\n * Adds a rule with the correct configuration.\n * @param {Object} rules - enforce rules object\n * @returns {Object} extended rules object\n */\nfunction extendRules(rules: EnforceRules) {\n\n    for (const rule: string in rules) {\n        const negativeForm: string = rules[rule].negativeForm;\n        const alias: string = rules[rule].alias;\n\n        if (negativeForm) {\n            rules[negativeForm] = (...args) => !rules[rule](...args);\n        }\n\n        if (alias) {\n            rules[alias] = rules[rule];\n        }\n    }\n\n    return rules;\n}\n\nexport default extendRules;\n","// @flow\nimport isArray from './lang/is_array';\nimport isNumber from './lang/is_number';\nimport isString from './lang/is_string';\nimport matches from './content/matches';\nimport inside from './content/inside';\nimport isNumeric from './content/is_numeric';\nimport isEmpty from './size/is_empty';\nimport greaterThan from './size/greater_than';\nimport greaterThanOrEquals from './size/greater_than_or_equals';\nimport lessThan from './size/less_than';\nimport lessThanOrEquals from './size/less_than_or_equals';\nimport longerThan from './size/longer_than';\nimport longerThanOrEquals from './size/longer_than_or_equals';\nimport shorterThan from './size/shorter_than';\nimport shorterThanOrEquals from './size/shorter_than_or_equals';\nimport lengthEquals from './size/length_equals';\nimport extendRules from '../helpers/extend_rules';\n\nconst rules: EnforceRules = {\n    isArray,\n    isNumber,\n    isString,\n    matches,\n    inside,\n    isNumeric,\n    isEmpty,\n    greaterThan,\n    greaterThanOrEquals,\n    lessThan,\n    lessThanOrEquals,\n    longerThan,\n    longerThanOrEquals,\n    shorterThan,\n    shorterThanOrEquals,\n    lengthEquals\n};\n\nexport default extendRules(rules);","// @flow\n\n/**\n * Run a single rule against enforced value (e.g. `isNumber()`)\n *\n * @param {Function} rule - rule to run\n * @param {Any} value\n * @param {Array} args list of arguments sent from consumer\n */\nfunction rule(rule: EnforceRule, value: AnyValue, ...args: RuleArgs): void {\n\n    if (typeof rule !== 'function') { return; }\n\n    if (rule(value, ...args) !== true) {\n        throw new Error(`[Enforce]: ${rule.name} invalid ${typeof value} value`);\n    }\n}\n\nexport default rule;\n","// @flow\n\nimport rules from './runnables/rules';\nimport ruleRunner from './runners/rule';\n\n// $FlowFixMe\nconst glob: GlobalObject = Function('return this')();\n\nconst isRule: Function = (rulesObject, name): boolean => (\n    rulesObject.hasOwnProperty(name) && typeof rulesObject[name] === 'function'\n);\n\nconst Enforce: Function = (customRules: EnforceRules = {}): EnforceInstance => {\n    const rulesObject: EnforceRules = Object.assign({}, rules, customRules);\n\n    if (typeof Proxy === 'function') {\n        return (value: AnyValue): EnforceRules => {\n            const proxy: EnforceRules = new Proxy(rulesObject, {\n                get: (rules, fnName) => {\n                    if (!isRule(rules, fnName)) { return; }\n\n                    return (...args) => {\n                        ruleRunner(rules[fnName], value, ...args);\n                        return proxy;\n                    };\n                }\n            });\n            return proxy;\n        };\n    }\n\n    // This is relatively heavier, and preferably should only be done when lacking proxy support\n    return (value) => Object.keys(rulesObject).reduce((allRules, fnName) => {\n        if (!isRule(rulesObject, fnName)) { return allRules; }\n\n        allRules[fnName] = (...args) => {\n            ruleRunner(rulesObject[fnName], value, ...args);\n            return allRules;\n        };\n\n        return allRules;\n    }, {});\n};\n\nexport default Enforce;","// @flow\n\n/**\n * Run tests and catch errors\n *\n * @param {function} callback The test content\n * @return {boolean}\n */\nfunction validate(test: PassableTest): boolean {\n\n    if (typeof test !== 'function' && !(test instanceof Promise)) {\n        throw new TypeError(`[Validate]: expected ${typeof test} to be a function.`);\n    }\n\n    try {\n        return test() !== false;\n    } catch (_) {\n        return false;\n    }\n}\n\nexport default validate;","// @flow\nimport Passable from './core/Passable';\nimport Enforce from './Enforce';\nimport validate from './validate';\nimport { WARN, FAIL } from './constants';\n\nfunction passable(name: string, tests: TestsWrapper, specific: ?SpecificArgs) {\n    const suite: Passable = new Passable(name, tests, specific);\n    return suite.res.output;\n}\n\npassable.VERSION = PASSABLE_VERSION;\npassable.enforce = new Enforce({});\npassable.Enforce = Enforce;\npassable.validate = validate;\npassable.WARN = WARN;\npassable.FAIL = FAIL;\n\nexport default passable;"],"sourceRoot":""}